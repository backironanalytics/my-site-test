library(tidyverse)
library(rvest)
library(RSelenium)
library(httr)
library(rjson)
library(nbastatR)
library(jsonlite)
library(dplyr)
library(parallel)
library(stringi)
library(reactablefmtr)
color_set <- c("#f7c844","#2e6d9e","#429460")
rosters <- read.csv("C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/rosters.csv")
rosters_id <- rosters %>% filter(Include == "Y") %>% pull(idPlayer)
rosters_names <- rosters %>% filter(Include == "Y") %>% pull(namePlayer)
rosters_teams <- rosters %>% filter(Include == "Y") %>% pull(idTeam)
#1st Quarter Points
json_file <- "https://sportsbook-nash.draftkings.com/api/sportscontent/dkusil/v1/leagues/42648/categories/1215/subcategories/16551"
json_data <- fromJSON(txt=json_file)
dk_firstqpts <- json_data[5]
dk_firstqpts <- as.data.frame(dk_firstqpts)
dk_firstqpts <- unnest(dk_firstqpts)
dk_firstqpts <- dk_firstqpts %>% filter(selections.tags == "SGP") %>% select(seoIdentifier,selections.label,american) %>%
rename(namePlayer = seoIdentifier,label = selections.label,odds = american)
dk_firstqpts <- dk_firstqpts %>%
mutate(label = ifelse(label == "3+",2.5,ifelse(label == "4+",3.5,ifelse(label == "5+",4.5,
ifelse(label == "6+",5.5,ifelse(label == "7+",6.5,
ifelse(label == "8+",7.5,ifelse(label == "9+",8.5,ifelse(label == "9+",8.5,ifelse(label == "10+",9.5,label)))))))))) %>%
mutate(odds = as.numeric(str_replace(odds,"−","-")))
# Pts Reb Ast O/U
json_file <- "https://sportsbook-nash.draftkings.com/api/sportscontent/dkusil/v1/leagues/42648/categories/583/subcategories/5001"
json_data <- fromJSON(txt=json_file)
dk_ptrebast <- json_data[5]
dk_ptrebast <- as.data.frame(dk_ptrebast)
dk_ptrebast <- unnest(dk_ptrebast)
dk_ptrebast <- dk_ptrebast %>% filter(selections.tags == "MainPointLine") %>% select(seoIdentifier,selections.label,american,selections.points) %>%
rename(namePlayer = seoIdentifier,label = selections.label,odds = american,OU = selections.points) %>% pivot_wider(names_from = label, values_from = odds)
#Pts Ast O/U
json_file <- "https://sportsbook-nash.draftkings.com/api/sportscontent/dkusil/v1/leagues/42648/categories/583/subcategories/9973"
json_data <- fromJSON(txt=json_file)
test <- json_data[5]
test <- as.data.frame(test)
#Pts Reb O/U
json_file <- "https://sportsbook-nash.draftkings.com/api/sportscontent/dkusil/v1/leagues/42648/categories/583/subcategories/9976"
json_data <- fromJSON(txt=json_file)
dk_ptreb <- json_data[5]
dk_ptreb <- as.data.frame(dk_ptreb)
dk_ptreb <- unnest(dk_ptreb)
dk_ptreb <- dk_ptreb %>% filter(selections.tags == "MainPointLine") %>% select(seoIdentifier,selections.label,american,selections.points) %>%
rename(namePlayer = seoIdentifier,label = selections.label,odds = american,OU = selections.points) %>% pivot_wider(names_from = label, values_from = odds)
#Ast Reb O/U
json_file <- "https://sportsbook-nash.draftkings.com/api/sportscontent/dkusil/v1/leagues/42648/categories/583/subcategories/9974"
json_data <- fromJSON(txt=json_file)
dk_astreb  <- json_data[5]
dk_astreb <- as.data.frame(dk_astreb)
dk_astreb <- unnest(dk_astreb)
dk_astreb <- dk_astreb %>% filter(selections.tags == "MainPointLine") %>% select(seoIdentifier,selections.label,american,selections.points) %>%
rename(namePlayer = seoIdentifier,label = selections.label,odds = american,OU = selections.points) %>% pivot_wider(names_from = label, values_from = odds)
#Total Reb O/U
json_file <- "https://sportsbook-nash.draftkings.com/api/sportscontent/dkusil/v1/leagues/42648/categories/1216/subcategories/12492"
json_data <- fromJSON(txt=json_file)
test <- json_data[5]
test <- as.data.frame(test)
# Steals Blocks O/U
json_file <- "https://sportsbook-nash.draftkings.com/api/sportscontent/dkusil/v1/leagues/42648/categories/1293/subcategories/13781"
json_data <- fromJSON(txt=json_file)
dk_stlblk  <- json_data[5]
dk_stlblk <- as.data.frame(dk_stlblk)
dk_stlblk <- unnest(dk_stlblk)
dk_stlblk <- dk_stlblk %>% filter(selections.tags == "MainPointLine") %>% select(seoIdentifier,selections.label,american,selections.points) %>%
rename(namePlayer = seoIdentifier,label = selections.label,odds = american,OU = selections.points) %>% pivot_wider(names_from = label, values_from = odds)
# Threes Made
json_file <- "https://sportsbook-nash.draftkings.com/api/sportscontent/dkusil/v1/leagues/42648/categories/1218/subcategories/12497"
json_data <- fromJSON(txt=json_file)
dk_fg3m  <- json_data[5]
dk_fg3m <- as.data.frame(dk_fg3m)
dk_fg3m <- unnest(dk_fg3m)
dk_fg3m <- dk_fg3m %>% filter(selections.tags == "MainPointLine") %>% select(seoIdentifier,selections.label,american,selections.points) %>%
rename(namePlayer = seoIdentifier,label = selections.label,odds = american,OU = selections.points) %>% pivot_wider(names_from = label, values_from = odds)
# First Quarter Assists
json_file <- "https://sportsbook-nash.draftkings.com/api/sportscontent/dkusil/v1/leagues/42648/categories/1217/subcategories/16552"
json_data <- fromJSON(txt=json_file)
dk_firstqast <- json_data[5]
dk_firstqast <- as.data.frame(dk_firstqast)
dk_firstqast <- unnest(dk_firstqast)
dk_firstqast <- dk_firstqast %>% filter(selections.tags == "SGP") %>% select(seoIdentifier,selections.label,american) %>%
rename(namePlayer = seoIdentifier,label = selections.label,odds = american)
dk_firstqast <- dk_firstqast %>%
mutate(label = ifelse(label == "3+",2.5,ifelse(label == "4+",3.5,ifelse(label == "5+",4.5,
ifelse(label == "6+",5.5,ifelse(label == "7+",6.5,
ifelse(label == "8+",7.5,ifelse(label == "9+",8.5,ifelse(label == "9+",8.5,ifelse(label == "10+",9.5,ifelse(label == "2+",1.5,label))))))))))) %>%
mutate(odds = as.numeric(str_replace(odds,"−","-")))
# First Quarter Rebounds
json_file <- "https://sportsbook-nash.draftkings.com/api/sportscontent/dkusil/v1/leagues/42648/categories/1216/subcategories/16553"
json_data <- fromJSON(txt=json_file)
dk_firstqreb <- json_data[5]
dk_firstqreb <- as.data.frame(dk_firstqreb)
dk_firstqreb <- unnest(dk_firstqreb)
dk_firstqreb <- dk_firstqreb %>% filter(selections.tags == "SGP") %>% select(seoIdentifier,selections.label,american) %>%
rename(namePlayer = seoIdentifier,label = selections.label,odds = american)
dk_firstqreb <- dk_firstqreb %>%
mutate(label = ifelse(label == "3+",2.5,ifelse(label == "4+",3.5,ifelse(label == "5+",4.5,
ifelse(label == "6+",5.5,ifelse(label == "7+",6.5,
ifelse(label == "8+",7.5,ifelse(label == "9+",8.5,ifelse(label == "9+",8.5,ifelse(label == "10+",9.5,ifelse(label == "2+",1.5,label)))))))))))
# Steals
json_file <- "https://sportsbook-nash.draftkings.com/api/sportscontent/dkusil/v1/leagues/42648/categories/1293/subcategories/13508"
json_data <- fromJSON(txt=json_file)
dk_stl <- json_data[5]
dk_stl <- as.data.frame(dk_stl)
dk_stl <- unnest(dk_stl)
dk_stl <- dk_stl %>% filter(selections.tags == "MainPointLine") %>% select(seoIdentifier,selections.label,american,selections.points) %>%
rename(namePlayer = seoIdentifier,label = selections.label,odds = american,OU = selections.points) %>% pivot_wider(names_from = label, values_from = odds)
# Blocks
json_file <- "https://sportsbook-nash.draftkings.com/api/sportscontent/dkusil/v1/leagues/42648/categories/1293/subcategories/13780"
json_data <- fromJSON(txt=json_file)
dk_blk <- json_data[5]
dk_blk <- as.data.frame(dk_blk)
dk_blk <- unnest(dk_blk)
dk_blk <- dk_blk %>% filter(selections.tags == "MainPointLine") %>% select(seoIdentifier,selections.label,american,selections.points) %>%
rename(namePlayer = seoIdentifier,label = selections.label,odds = american,OU = selections.points) %>% pivot_wider(names_from = label, values_from = odds)
# Turnovers
json_file <- "https://sportsbook-nash.draftkings.com/api/sportscontent/dkusil/v1/leagues/42648/categories/1293/subcategories/13780"
json_data <- fromJSON(txt=json_file)
dk_tov <- json_data[5]
dk_tov <- as.data.frame(dk_tov)
dk_tov <- unnest(dk_tov)
dk_tov <- dk_tov %>% filter(selections.tags == "MainPointLine") %>% select(seoIdentifier,selections.label,american,selections.points) %>%
rename(namePlayer = seoIdentifier,label = selections.label,odds = american,OU = selections.points) %>% pivot_wider(names_from = label, values_from = odds)
# Points
json_file <- "https://sportsbook-nash.draftkings.com/api/sportscontent/dkusil/v1/leagues/42648/categories/1215/subcategories/12488"
json_data <- fromJSON(txt=json_file)
dk_pts <- json_data[5]
dk_pts <- as.data.frame(dk_pts)
dk_pts <- unnest(dk_pts)
dk_pts <- dk_pts %>% filter(selections.tags == "MainPointLine") %>% select(seoIdentifier,selections.label,american,selections.points) %>%
rename(namePlayer = seoIdentifier,label = selections.label,odds = american,OU = selections.points) %>% pivot_wider(names_from = label, values_from = odds)
# Assists
json_file <- "https://sportsbook-nash.draftkings.com/api/sportscontent/dkusil/v1/leagues/42648/categories/1217/subcategories/12495"
json_data <- fromJSON(txt=json_file)
dk_ast <- json_data[5]
dk_ast <- as.data.frame(dk_ast)
dk_ast <- unnest(dk_ast)
dk_ast <- dk_ast %>% filter(selections.tags == "MainPointLine") %>% select(seoIdentifier,selections.label,american,selections.points) %>%
rename(namePlayer = seoIdentifier,label = selections.label,odds = american,OU = selections.points) %>% pivot_wider(names_from = label, values_from = odds)
# Rebounds
json_file <- "https://sportsbook-nash.draftkings.com/api/sportscontent/dkusil/v1/leagues/42648/categories/1216/subcategories/12492"
json_data <- fromJSON(txt=json_file)
dk_reb <- json_data[5]
dk_reb <- as.data.frame(dk_reb)
dk_reb <- unnest(dk_reb)
dk_reb <- dk_reb %>% filter(selections.tags == "MainPointLine") %>% select(seoIdentifier,selections.label,american,selections.points) %>%
rename(namePlayer = seoIdentifier,label = selections.label,odds = american,OU = selections.points) %>% pivot_wider(names_from = label, values_from = odds)
##Date used for schedule
scheduleDate <- "2024-10-01"
Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2)
all_rosters <- seasons_rosters(seasons = 2025, return_message = FALSE)
playerdata <- game_logs(seasons = 2024:2025, result_types = "player", season_types = c("Regular Season"))
playerdata_playoffs <- game_logs(seasons = 2024, result_types = "player", season_types = c("Playoffs"))
playerdata <- bind_rows(playerdata, playerdata_playoffs)
##DELETE##
#playerdata <- playerdata %>% filter(idPlayer == 203471)
player_name <- function(x){
playerdata %>% filter(idPlayer == x) %>%
select(dateGame, idGame, slugOpponent, idPlayer, namePlayer, fgm,fga,pts,treb,ast,stl,blk,fg3m,fg3a,tov,
plusminus,minutes,locationGame, countDaysRestPlayer, isB2B, isB2BFirst, isB2BSecond) %>% group_by(namePlayer) %>% summarize(n = n()) %>% pull(namePlayer)
}
player_name <- lapply(rosters_id,player_name)
players <- player_name
players <- unlist(players)
#Schedule
teams <- nba_teams(league = "NBA")
teams <- teams %>% filter(idLeague == 2, idConference != 0) %>% select(cityTeam, slugTeam, idTeam, nameTeam, urlThumbnailTeam) %>% rename(Opponent = cityTeam) %>%
mutate(urlThumbnailTeam = ifelse(slugTeam == "GSW", "https://cdn.nba.com/logos/nba/1610612744/primary/L/logo.svg",urlThumbnailTeam))
slugteams <- teams %>% select(slugTeam)
slugteams_list <- slugteams %>% mutate(slugTeam = tolower(slugTeam)) %>%
mutate(slugTeam = ifelse(slugTeam == "uta","utah",
ifelse(slugTeam == "nop","no",slugTeam))) %>% pull(slugTeam)
schedule <- lapply(slugteams_list, function(x){
testurl <- paste0("https://www.espn.com/nba/team/schedule/_/name/",x,"/seasontype/2")
h <- read_html(testurl)
tab <- h |> html_nodes("table")
tab <- tab[[1]] |> html_table()
tab <- tab |> setNames(c("Date", "Opponenet", "Time", "TV","Tickets","Tickets_dup","Unused1","Unused2"))
tab <- tab[-(1:2),]
tab <- tab %>% mutate(location = ifelse(str_detect(Opponenet,"@"),"Away","Home")) %>%
mutate(Opponent = ifelse(location == "Home", str_sub(Opponenet,3),str_sub(Opponenet,2))) %>%
mutate(Date = str_extract(Date, '\\b[^,]+$')) %>% mutate(Date = as.Date(Date, "%b%d")) %>%
mutate(Date = if_else(Date < scheduleDate,Date %m+% years(1),Date)) %>% select(Date,location,Opponent)
tab <- tab %>% left_join(teams, by = "Opponent") %>% mutate(Team = toupper(x)) %>%
mutate(Team = ifelse(Team == "UTAH","UTA",ifelse(Team == "NO","NOP",Team))) %>% mutate(next_game = ifelse(Date >= Sys.Date()+1,TRUE,FALSE)) %>%
mutate(game_number = 1:n())
})
schedule <- bind_rows(schedule)
schedule <- schedule %>% filter(!is.na(Date))
all_players <- as.data.frame(players) %>% rename(namePlayer = players) %>%
left_join(playerdata %>% filter(slugSeason == "2024-25") %>% group_by(namePlayer,idPlayer,slugTeam) %>% summarize(n = n()), by = "namePlayer") %>%
select(namePlayer,idPlayer,n) %>% ungroup()
all_players_previous <- schedule %>% filter(Date == schedule %>% filter(next_game == TRUE) %>% pull(Date) %>% min -1) %>% pull(slugTeam)
all_players_previous_batch <- lapply(all_players_previous, function(x){
rosters %>% filter(slugTeam == x) %>% filter(Include == "Y") %>% select(idPlayer,namePlayer)
})
all_players_previous_batch <- bind_rows(all_players_previous_batch)
all_players_previous_batch <- all_players_previous_batch %>%
left_join(playerdata %>% filter(slugSeason == "2024-25") %>% group_by(namePlayer,idPlayer,slugTeam) %>% summarize(n = n()), by = "idPlayer") %>% select(idPlayer,namePlayer.y) %>%
rename(namePlayer = namePlayer.y)
#Next Game
next_game_date_teams <- schedule %>% filter(Date == schedule %>% filter(next_game == TRUE) %>% pull(Date) %>% min-1) %>% pull(slugTeam)
next_team_batch <- lapply(next_game_date_teams, function(x){
playerdata %>% filter(slugTeam == x , typeSeason == "Regular Season", slugSeason == "2024-25") %>% group_by(idPlayer,namePlayer) %>% summarize(n = n())
})
next_team_batch <- bind_rows(next_team_batch)
next_team_batch_date <- schedule %>% filter(next_game == TRUE) %>% pull(Date) %>% min -1
##Filter out players who have played this season but no longer on roster
on_roster_filter <- all_rosters %>% filter(idPlayer %in% next_team_batch$idPlayer) %>% group_by(namePlayer,idPlayer,slugTeam) %>% summarize(n = n())
next_team_batch <- on_roster_filter %>% select(idPlayer,namePlayer,n)
##Matchup
matchup <- schedule %>% filter(Date == schedule %>% filter(next_game == TRUE) %>%
pull(Date) %>% min-1) %>% mutate(matchup = ifelse(location == "Away",paste("vs.",Team),paste("@",Team)))
# Play by Play
gameids<- playerdata %>% filter(slugTeam %in% next_game_date_teams) %>% group_by(idGame) %>% summarize(n = n()) %>% pull(idGame)
numcores <- parallelly::availableCores()
cl <- makeCluster(numcores)
my_function <- function(x) {
library(tidyverse)
library(nbastatR)
play_play <- play_by_play_v2(game_ids = x,nest_data = F)
}
results <- parLapply(cl,gameids,my_function)
play_play <- bind_rows(results)
stopCluster(cl)
##Pts Reb Ast
ptrebast <- lapply(next_team_batch$idPlayer, function(x){
slug_team <- all_rosters %>% filter(idPlayer == x) %>% select(idPlayer,slugTeam)
hit_rate <- seq(10.5,60.5,1)
sd <- sd(playerdata %>% filter(idPlayer == x, typeSeason == "Regular Season", slugSeason == "2024-25") %>% mutate(pts_reb_ast = pts+treb+ast) %>%
pull(pts_reb_ast))
df <- playerdata %>% filter(idPlayer == x, typeSeason == "Regular Season", slugSeason == "2024-25") %>%
mutate(pts_reb_ast = pts+treb+ast) %>% select(namePlayer,idPlayer,dateGame,locationGame,pts_reb_ast,urlPlayerHeadshot) %>%
left_join(slug_team, by = "idPlayer")
hit_rate_above <- lapply(hit_rate, function(x){
df %>% mutate(test = mean(pts_reb_ast > x), OU = x) %>% group_by(namePlayer, idPlayer, slugTeam, OU) %>%
summarize(test = min(test),average = mean(pts_reb_ast), sd = sd, .groups = 'drop') %>%
ungroup()
})
hit_rate_above
})
ptrebast <- bind_rows(ptrebast) %>% mutate(Type = "Regular Season")
##Pts Reb Ast Home Games
ptrebast_home <- lapply(next_team_batch$idPlayer, function(x){
slug_team <- all_rosters %>% filter(idPlayer == x) %>% select(idPlayer,slugTeam)
hit_rate <- seq(10.5,60.5,1)
sd <- sd(playerdata %>% filter(idPlayer == x, typeSeason == "Regular Season", slugSeason == "2024-25", locationGame == "H") %>%
mutate(pts_reb_ast = pts+treb+ast) %>%
pull(pts_reb_ast))
df <- playerdata %>% filter(idPlayer == x, typeSeason == "Regular Season", slugSeason == "2024-25", locationGame == "H") %>%
mutate(pts_reb_ast = pts+treb+ast) %>% select(namePlayer,idPlayer,dateGame,locationGame,pts_reb_ast) %>% left_join(slug_team, by = "idPlayer")
hit_rate_above <- lapply(hit_rate, function(x){
df %>% mutate(test = mean(pts_reb_ast > x), OU = x) %>% group_by(namePlayer, idPlayer, slugTeam, OU) %>%
summarize(test = min(test),average = mean(pts_reb_ast),sd = sd, .groups = 'drop') %>% ungroup()
})
hit_rate_above
})
ptrebast_home <- bind_rows(ptrebast_home) %>% mutate(Type = "Home Games")
##Pts Reb Ast Away Games
ptrebast_away <- lapply(next_team_batch$idPlayer, function(x){
slug_team <- all_rosters %>% filter(idPlayer == x) %>% select(idPlayer,slugTeam)
hit_rate <- seq(10.5,60.5,1)
sd <- sd(playerdata %>% filter(idPlayer == x, typeSeason == "Regular Season", slugSeason == "2024-25", locationGame == "A") %>%
mutate(pts_reb_ast = pts+treb+ast) %>%
pull(pts_reb_ast))
df <- playerdata %>% filter(idPlayer == x, typeSeason == "Regular Season", slugSeason == "2024-25", locationGame == "A") %>%
mutate(pts_reb_ast = pts+treb+ast) %>% select(namePlayer,idPlayer,dateGame,locationGame,pts_reb_ast) %>% left_join(slug_team, by = "idPlayer")
hit_rate_above <- lapply(hit_rate, function(x){
df %>% mutate(test = mean(pts_reb_ast > x), OU = x) %>% group_by(namePlayer, idPlayer, slugTeam, OU) %>%
summarize(test = min(test),average = mean(pts_reb_ast),sd = sd, .groups = 'drop') %>% ungroup()
})
hit_rate_above
})
ptrebast_away <- bind_rows(ptrebast_away) %>% mutate(Type = "Away Games")
##Pts Reb Ast Last 5
ptrebast_five <- lapply(next_team_batch$idPlayer, function(x){
slug_team <- all_rosters %>% filter(idPlayer == x) %>% select(idPlayer,slugTeam)
hit_rate <- seq(10.5,60.5,1)
sd <- sd(playerdata %>% filter(idPlayer == x, typeSeason == "Regular Season", slugSeason == "2024-25") %>%
mutate(pts_reb_ast = pts+treb+ast) %>% arrange(desc(dateGame)) %>% head(5) %>%
pull(pts_reb_ast))
df <- playerdata %>% filter(idPlayer == x, typeSeason == "Regular Season", slugSeason == "2024-25") %>%
mutate(pts_reb_ast = pts+treb+ast) %>% select(namePlayer,idPlayer,dateGame,locationGame,pts_reb_ast) %>% arrange(desc(dateGame)) %>% head(5) %>% left_join(slug_team, by = "idPlayer")
hit_rate_above <- lapply(hit_rate, function(x){
df %>% mutate(test = mean(pts_reb_ast > x), OU = x) %>% group_by(namePlayer, idPlayer, slugTeam, OU) %>%
summarize(test = min(test),average = mean(pts_reb_ast),sd = sd, .groups = 'drop') %>% ungroup()
})
hit_rate_above
})
ptrebast_five <- bind_rows(ptrebast_five) %>% mutate(Type = "Last 5")
##Pts Reb Ast Last 10
ptrebast_ten <- lapply(next_team_batch$idPlayer, function(x){
slug_team <- all_rosters %>% filter(idPlayer == x) %>% select(idPlayer,slugTeam)
hit_rate <- seq(10.5,60.5,1)
sd <- sd(playerdata %>% filter(idPlayer == x, typeSeason == "Regular Season", slugSeason == "2024-25") %>%
mutate(pts_reb_ast = pts+treb+ast) %>% arrange(desc(dateGame)) %>% head(10) %>%
pull(pts_reb_ast))
df <- playerdata %>% filter(idPlayer == x, typeSeason == "Regular Season", slugSeason == "2024-25") %>%
mutate(pts_reb_ast = pts+treb+ast) %>% select(namePlayer,idPlayer,dateGame,locationGame,pts_reb_ast) %>% arrange(desc(dateGame)) %>% head(10) %>% left_join(slug_team, by = "idPlayer")
hit_rate_above <- lapply(hit_rate, function(x){
df %>% mutate(test = mean(pts_reb_ast > x), OU = x) %>% group_by(namePlayer, idPlayer, slugTeam, OU) %>%
summarize(test = min(test),average = mean(pts_reb_ast),sd = sd, .groups = 'drop') %>% ungroup()
})
hit_rate_above
})
ptrebast_ten <- bind_rows(ptrebast_ten) %>% mutate(Type = "Last 10")
ptreb_ast_df <- bind_rows(ptrebast,ptrebast_away,ptrebast_home,ptrebast_five,ptrebast_ten)
ptreb_ast_df$namePlayer <- stri_trans_general(str = ptreb_ast_df$namePlayer, id = "Latin-ASCII")
ptreb_ast_df <- ptreb_ast_df %>% left_join(dk_ptrebast, by = c("namePlayer","OU")) %>% filter(!is.na(Over)) %>% rename(season_hit = test) %>%
left_join(playerdata %>% filter(typeSeason == "Regular Season", slugSeason == "2024-25") %>%
mutate(avg = pts+treb+ast) %>% group_by(idPlayer) %>% summarize(avg = mean(avg)), by = "idPlayer") %>%
left_join(ptreb_ast_df %>% filter(Type == "Regular Season") %>% group_by(idPlayer) %>% summarize(variation_regular = mean(sd)), by = "idPlayer") %>%
left_join(ptreb_ast_df %>% filter(Type == "Home Games") %>% group_by(idPlayer) %>% summarize(variation_home = mean(sd)), by = "idPlayer") %>%
left_join(ptreb_ast_df %>% filter(Type == "Away Games") %>% group_by(idPlayer) %>% summarize(variation_away = mean(sd)), by = "idPlayer") %>%
left_join(ptreb_ast_df %>% filter(Type == "Last 10") %>% group_by(idPlayer) %>% summarize(variation_ten = mean(sd)), by = "idPlayer") %>%
left_join(ptreb_ast_df %>% filter(Type == "Last 5") %>% group_by(idPlayer) %>% summarize(variation_five = mean(sd)), by = "idPlayer")
ptreb_ast_df_join <- ptreb_ast_df  %>% mutate(Ident = ifelse(season_hit < .30 & Type == "Regular Season", 1,0)) %>%
group_by(namePlayer,idPlayer) %>% summarize(Ident = mean(Ident))
ptrebast_picks <- ptreb_ast_df %>% left_join(ptreb_ast_df_join, by = c("namePlayer","idPlayer")) %>%
filter(Ident != 0) %>% group_by(namePlayer, OU,Under, slugTeam,Type, avg = round(avg,1),
variation_regular = round(variation_regular,1),
variation_home = as.character(round(variation_home,1)),
variation_away = as.character(round(variation_away,1)),
variation_five = as.character(round(variation_five,1)),
variation_ten = as.character(round(variation_ten,1))) %>%
summarize(season_hit) %>% ungroup() %>% mutate(season_hit = 1-season_hit) %>%pivot_wider(names_from = Type, values_from = season_hit) %>%
left_join(teams %>% select(slugTeam,urlThumbnailTeam), by = "slugTeam") %>%
left_join(matchup %>% select(slugTeam,matchup), by = "slugTeam") %>%
relocate(urlThumbnailTeam, .after = OU) %>% relocate(matchup, .after = urlThumbnailTeam) %>%
select(!c(slugTeam,variation_home,variation_away,variation_ten,variation_five))
reactable(highlight = TRUE, ptrebast_picks, columns = list(namePlayer = colDef(name = "Player",sticky = "left", width = 110,
style = cell_style(font_weight = "bold")),
urlThumbnailTeam = colDef(name = "Team",cell = embed_img(height = "25",width="25")),
avg = colDef(name = "Season Avg"),
variation_regular = colDef(name = "Season SD"),
Under = colDef(name = "Odds"),
OU = colDef(name = "Total Points, Rebounds, Assists OU",width = 110),
`Away Games` = colDef(cell = data_bars(ptrebast_picks,
fill_color = color_set,
background = '#F1F1F1',
min_value = 0,
max_value = 1,
text_position = 'outside-end',
number_fmt = scales::percent,
bold_text = TRUE)),
`Home Games` = colDef(cell = data_bars(ptrebast_picks,
fill_color = color_set,
background = '#F1F1F1',
min_value = 0,
max_value = 1,
text_position = 'outside-end',
number_fmt = scales::percent,
bold_text = TRUE)),
`Last 10` = colDef(cell = data_bars(ptrebast_picks,
fill_color = color_set,
background = '#F1F1F1',
min_value = 0,
max_value = 1,
text_position = 'outside-end',
number_fmt = scales::percent,
bold_text = TRUE)),
`Last 5` = colDef(cell = data_bars(ptrebast_picks,
fill_color = color_set,
background = '#F1F1F1',
min_value = 0,
max_value = 1,
text_position = 'outside-end',
number_fmt = scales::percent,
bold_text = TRUE)),
`Regular Season` = colDef(cell = data_bars(ptrebast_picks,
fill_color = color_set,
background = '#F1F1F1',
min_value = 0,
max_value = 1,
text_position = 'outside-end',
number_fmt = scales::percent,
bold_text = TRUE))),
theme = fivethirtyeight(), defaultPageSize = 20, fullWidth = TRUE) %>% add_title("Under Success Rates") %>% add_subtitle("2024/25 Regular Season")
##Assists
ast <- lapply(next_team_batch$idPlayer, function(x){
hit_rate <- seq(0.5,13.5,1)
sd <- sd(playerdata %>% filter(idPlayer == x, typeSeason == "Regular Season", slugSeason == "2024-25")  %>%
pull(ast))
df <- playerdata %>% filter(idPlayer == x, typeSeason == "Regular Season", slugSeason == "2024-25") %>%
mutate(ast_reb_ast = ast+treb+ast) %>% select(namePlayer,idPlayer,slugTeam,dateGame,locationGame,ast)
hit_rate_above <- lapply(hit_rate, function(x){
df %>% mutate(test = mean(ast > x), OU = x) %>% group_by(namePlayer, idPlayer, OU) %>% summarize(test = min(test), sd = sd, .groups = 'drop') %>%
ungroup()
})
hit_rate_above
})
ast <- bind_rows(ast) %>% unnest(cols = everything()) %>% mutate(Type = "Regular Season")
##Assists Home Games
ast_home <- lapply(next_team_batch$idPlayer, function(x){
hit_rate <- seq(0.5,13.5,1)
sd <- sd(playerdata %>% filter(idPlayer == x, typeSeason == "Regular Season", slugSeason == "2024-25", locationGame == "H")  %>%
pull(ast))
df <- playerdata %>% filter(idPlayer == x, typeSeason == "Regular Season", slugSeason == "2024-25", locationGame == "H") %>%
mutate(ast_reb_ast = ast+treb+ast) %>% select(namePlayer,idPlayer,slugTeam,dateGame,locationGame,ast)
hit_rate_above <- lapply(hit_rate, function(x){
df %>% mutate(test = mean(ast > x), OU = x) %>% group_by(namePlayer, idPlayer, OU) %>% summarize(test = min(test), sd = sd, .groups = 'drop') %>%
ungroup()
})
hit_rate_above
})
ast_home <- bind_rows(ast_home) %>% unnest(cols = everything()) %>% mutate(Type = "Home Games")
##Assists Away Games
ast_away <- lapply(next_team_batch$idPlayer, function(x){
hit_rate <- seq(0.5,13.5,1)
sd <- sd(playerdata %>% filter(idPlayer == x, typeSeason == "Regular Season", slugSeason == "2024-25", locationGame == "A") %>%
pull(ast))
df <- playerdata %>% filter(idPlayer == x, typeSeason == "Regular Season", slugSeason == "2024-25", locationGame == "A") %>%
mutate(ast_reb_ast = ast+treb+ast) %>% select(namePlayer,idPlayer,slugTeam,dateGame,locationGame,ast)
hit_rate_above <- lapply(hit_rate, function(x){
df %>% mutate(test = mean(ast > x), OU = x) %>% group_by(namePlayer, idPlayer, OU) %>% summarize(test = min(test), sd = sd, .groups = 'drop') %>%
ungroup()
})
hit_rate_above
})
ast_away <- bind_rows(ast_home) %>% unnest(cols = everything()) %>% mutate(Type = "Away Games")
##Assists Last 10
ast_ten <- lapply(next_team_batch$idPlayer, function(x){
hit_rate <- seq(0.5,13.5,1)
sd <- sd(playerdata %>% filter(idPlayer == x, typeSeason == "Regular Season", slugSeason == "2024-25") %>% arrange(desc(dateGame)) %>% head(10) %>%
pull(ast))
df <- playerdata %>% filter(idPlayer == x, typeSeason == "Regular Season", slugSeason == "2024-25") %>%
mutate(ast_reb_ast = ast+treb+ast) %>% select(namePlayer,idPlayer,slugTeam,dateGame,locationGame,ast) %>% arrange(desc(dateGame)) %>% head(10)
hit_rate_above <- lapply(hit_rate, function(x){
df %>% mutate(test = mean(ast > x), OU = x) %>% group_by(namePlayer, idPlayer, OU) %>% summarize(test = min(test), sd = sd, .groups = 'drop') %>%
ungroup()
})
hit_rate_above
})
ast_ten <- bind_rows(ast_ten) %>% unnest(cols = everything()) %>% mutate(Type = "Last 10")
##Assists Last 5
ast_five <- lapply(next_team_batch$idPlayer, function(x){
hit_rate <- seq(0.5,13.5,1)
sd <- sd(playerdata %>% filter(idPlayer == x, typeSeason == "Regular Season", slugSeason == "2024-25") %>% arrange(desc(dateGame)) %>% head(5) %>%
pull(ast))
df <- playerdata %>% filter(idPlayer == x, typeSeason == "Regular Season", slugSeason == "2024-25") %>%
mutate(ast_reb_ast = ast+treb+ast) %>% select(namePlayer,idPlayer,slugTeam,dateGame,locationGame,ast) %>% arrange(desc(dateGame)) %>% head(5)
hit_rate_above <- lapply(hit_rate, function(x){
df %>% mutate(test = mean(ast > x), OU = x) %>% group_by(namePlayer, idPlayer, OU) %>% summarize(test = min(test), sd = sd, .groups = 'drop') %>%
ungroup()
})
hit_rate_above
})
ast_five <- bind_rows(ast_five) %>% unnest(cols = everything()) %>% mutate(Type = "Last 5")
ast_df <- bind_rows(ast,ast_away,ast_home,ast_five,ast_ten)
ast_df$namePlayer <- stri_trans_general(str = ast_df$namePlayer, id = "Latin-ASCII")
ast_df <- ast_df %>% left_join(dk_ast, by = c("namePlayer","OU")) %>% filter(!is.na(Over)) %>% rename(season_hit = test) %>%
left_join(playerdata %>% filter(typeSeason == "Regular Season", slugSeason == "2024-25") %>% group_by(idPlayer) %>%
summarize(avg = mean(ast)), by = "idPlayer") %>%
left_join(ast_df %>% filter(Type == "Regular Season") %>% group_by(idPlayer) %>%
summarize(variation_regular = mean(sd)), by = "idPlayer")
ast_df_join <- ast_df  %>% mutate(Ident = ifelse(season_hit < .30 & Type == "Regular Season", 1,0)) %>%
group_by(namePlayer,idPlayer) %>% summarize(Ident = mean(Ident))
ast_picks <- ast_df %>% left_join(ast_df_join, by = c("namePlayer","idPlayer")) %>%
filter(Ident != 0) %>% group_by(namePlayer,idPlayer, OU, Under, Type, avg = round(avg,1),
variation_regular = round(variation_regular,1)) %>%
summarize(season_hit) %>% ungroup() %>% mutate(season_hit = 1 - season_hit) %>%
pivot_wider(names_from = Type, values_from = season_hit) %>% left_join(all_rosters %>% select(idPlayer,slugTeam), by = "idPlayer") %>%
left_join(teams %>% select(slugTeam,urlThumbnailTeam), by = "slugTeam") %>%
left_join(matchup %>% select(slugTeam,matchup), by = "slugTeam") %>%
relocate(urlThumbnailTeam, .after = namePlayer) %>% relocate(matchup, .after = urlThumbnailTeam) %>% select(-c(slugTeam,idPlayer))
reactable(highlight = TRUE, striped = TRUE,ast_picks, columns = list(namePlayer = colDef(name = "Player",sticky = "left", width = 110),
urlThumbnailTeam = colDef(name = "Team",cell = embed_img(height = "25",width="25")),
avg = colDef(name = "Season Avg"),
variation_regular = colDef(name = "Season SD"),
Under = colDef(name = "Odds"),
OU = colDef(name = "Total Assists O/U",width = 110),
`Away Games` = colDef(cell = data_bars(ast_picks,
fill_color = color_set,
background = '#F1F1F1',
min_value = 0,
max_value = 1,
text_position = 'outside-end',
number_fmt = scales::percent)),
`Home Games` = colDef(cell = data_bars(ast_picks,
fill_color = color_set,
background = '#F1F1F1',
min_value = 0,
max_value = 1,
text_position = 'outside-end',
number_fmt = scales::percent)),
`Last 10` = colDef(cell = data_bars(ast_picks,
fill_color = color_set,
background = '#F1F1F1',
min_value = 0,
max_value = 1,
text_position = 'outside-end',
number_fmt = scales::percent)),
`Last 5` = colDef(cell = data_bars(ast_picks,
fill_color = color_set,
background = '#F1F1F1',
min_value = 0,
max_value = 1,
text_position = 'outside-end',
number_fmt = scales::percent)),
`Regular Season` = colDef(cell = data_bars(ast_picks,
fill_color = color_set,
background = '#F1F1F1',
min_value = 0,
max_value = 1,
text_position = 'outside-end',
number_fmt = scales::percent))),
theme = fivethirtyeight(), defaultPageSize = 20, fullWidth = TRUE) %>% add_title("Under Success Rates") %>% add_subtitle("2024/25 Regular Season")
