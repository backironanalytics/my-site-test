play_play <- play_by_play_v2(game_ids = x,nest_data = F)
}
results <- parLapply(cl,gameids,my_function)
play_play <- bind_rows(results)
stopCluster(cl)
##Pts Reb Ast
ptrebast <- lapply(next_team_batch$idPlayer, function(x){
slug_team <- all_rosters %>% filter(idPlayer == x) %>% select(idPlayer,slugTeam)
hit_rate <- seq(10.5,60.5,1)
sd <- sd(playerdata %>% filter(idPlayer == x, typeSeason == "Regular Season", slugSeason == "2024-25") %>% mutate(pts_reb_ast = pts+treb+ast) %>%
pull(pts_reb_ast))
df <- playerdata %>% filter(idPlayer == x, typeSeason == "Regular Season", slugSeason == "2024-25") %>%
mutate(pts_reb_ast = pts+treb+ast) %>% select(namePlayer,idPlayer,dateGame,locationGame,pts_reb_ast,urlPlayerHeadshot) %>%
left_join(slug_team, by = "idPlayer")
hit_rate_above <- lapply(hit_rate, function(x){
df %>% mutate(test = mean(pts_reb_ast > x), OU = x) %>% group_by(namePlayer, idPlayer, slugTeam, OU) %>%
summarize(test = min(test),average = mean(pts_reb_ast), sd = sd, .groups = 'drop') %>%
ungroup()
})
hit_rate_above
})
ptrebast <- bind_rows(ptrebast) %>% mutate(Type = "Regular Season")
##Pts Reb Ast Home Games
ptrebast_home <- lapply(next_team_batch$idPlayer, function(x){
slug_team <- all_rosters %>% filter(idPlayer == x) %>% select(idPlayer,slugTeam)
hit_rate <- seq(10.5,60.5,1)
sd <- sd(playerdata %>% filter(idPlayer == x, typeSeason == "Regular Season", slugSeason == "2024-25", locationGame == "H") %>%
mutate(pts_reb_ast = pts+treb+ast) %>%
pull(pts_reb_ast))
df <- playerdata %>% filter(idPlayer == x, typeSeason == "Regular Season", slugSeason == "2024-25", locationGame == "H") %>%
mutate(pts_reb_ast = pts+treb+ast) %>% select(namePlayer,idPlayer,dateGame,locationGame,pts_reb_ast) %>% left_join(slug_team, by = "idPlayer")
hit_rate_above <- lapply(hit_rate, function(x){
df %>% mutate(test = mean(pts_reb_ast > x), OU = x) %>% group_by(namePlayer, idPlayer, slugTeam, OU) %>%
summarize(test = min(test),average = mean(pts_reb_ast),sd = sd, .groups = 'drop') %>% ungroup()
})
hit_rate_above
})
ptrebast_home <- bind_rows(ptrebast_home) %>% mutate(Type = "Home Games")
##Pts Reb Ast Away Games
ptrebast_away <- lapply(next_team_batch$idPlayer, function(x){
slug_team <- all_rosters %>% filter(idPlayer == x) %>% select(idPlayer,slugTeam)
hit_rate <- seq(10.5,60.5,1)
sd <- sd(playerdata %>% filter(idPlayer == x, typeSeason == "Regular Season", slugSeason == "2024-25", locationGame == "A") %>%
mutate(pts_reb_ast = pts+treb+ast) %>%
pull(pts_reb_ast))
df <- playerdata %>% filter(idPlayer == x, typeSeason == "Regular Season", slugSeason == "2024-25", locationGame == "A") %>%
mutate(pts_reb_ast = pts+treb+ast) %>% select(namePlayer,idPlayer,dateGame,locationGame,pts_reb_ast) %>% left_join(slug_team, by = "idPlayer")
hit_rate_above <- lapply(hit_rate, function(x){
df %>% mutate(test = mean(pts_reb_ast > x), OU = x) %>% group_by(namePlayer, idPlayer, slugTeam, OU) %>%
summarize(test = min(test),average = mean(pts_reb_ast),sd = sd, .groups = 'drop') %>% ungroup()
})
hit_rate_above
})
ptrebast_away <- bind_rows(ptrebast_away) %>% mutate(Type = "Away Games")
##Pts Reb Ast Last 5
ptrebast_five <- lapply(next_team_batch$idPlayer, function(x){
slug_team <- all_rosters %>% filter(idPlayer == x) %>% select(idPlayer,slugTeam)
hit_rate <- seq(10.5,60.5,1)
sd <- sd(playerdata %>% filter(idPlayer == x, typeSeason == "Regular Season", slugSeason == "2024-25") %>%
mutate(pts_reb_ast = pts+treb+ast) %>% arrange(desc(dateGame)) %>% head(5) %>%
pull(pts_reb_ast))
df <- playerdata %>% filter(idPlayer == x, typeSeason == "Regular Season", slugSeason == "2024-25") %>%
mutate(pts_reb_ast = pts+treb+ast) %>% select(namePlayer,idPlayer,dateGame,locationGame,pts_reb_ast) %>% arrange(desc(dateGame)) %>% head(5) %>% left_join(slug_team, by = "idPlayer")
hit_rate_above <- lapply(hit_rate, function(x){
df %>% mutate(test = mean(pts_reb_ast > x), OU = x) %>% group_by(namePlayer, idPlayer, slugTeam, OU) %>%
summarize(test = min(test),average = mean(pts_reb_ast),sd = sd, .groups = 'drop') %>% ungroup()
})
hit_rate_above
})
ptrebast_five <- bind_rows(ptrebast_five) %>% mutate(Type = "Last 5")
##Pts Reb Ast Last 10
ptrebast_ten <- lapply(next_team_batch$idPlayer, function(x){
slug_team <- all_rosters %>% filter(idPlayer == x) %>% select(idPlayer,slugTeam)
hit_rate <- seq(10.5,60.5,1)
sd <- sd(playerdata %>% filter(idPlayer == x, typeSeason == "Regular Season", slugSeason == "2024-25") %>%
mutate(pts_reb_ast = pts+treb+ast) %>% arrange(desc(dateGame)) %>% head(10) %>%
pull(pts_reb_ast))
df <- playerdata %>% filter(idPlayer == x, typeSeason == "Regular Season", slugSeason == "2024-25") %>%
mutate(pts_reb_ast = pts+treb+ast) %>% select(namePlayer,idPlayer,dateGame,locationGame,pts_reb_ast) %>% arrange(desc(dateGame)) %>% head(10) %>% left_join(slug_team, by = "idPlayer")
hit_rate_above <- lapply(hit_rate, function(x){
df %>% mutate(test = mean(pts_reb_ast > x), OU = x) %>% group_by(namePlayer, idPlayer, slugTeam, OU) %>%
summarize(test = min(test),average = mean(pts_reb_ast),sd = sd, .groups = 'drop') %>% ungroup()
})
hit_rate_above
})
ptrebast_ten <- bind_rows(ptrebast_ten) %>% mutate(Type = "Last 10")
ptreb_ast_df <- bind_rows(ptrebast,ptrebast_away,ptrebast_home,ptrebast_five,ptrebast_ten)
ptreb_ast_df$namePlayer <- stri_trans_general(str = ptreb_ast_df$namePlayer, id = "Latin-ASCII")
ptreb_ast_df <- ptreb_ast_df %>% left_join(dk_ptrebast, by = c("namePlayer","OU")) %>% filter(!is.na(Over)) %>% rename(season_hit = test) %>%
left_join(playerdata %>% filter(typeSeason == "Regular Season", slugSeason == "2024-25") %>%
mutate(avg = pts+treb+ast) %>% group_by(idPlayer) %>% summarize(avg = mean(avg)), by = "idPlayer") %>%
left_join(ptreb_ast_df %>% filter(Type == "Regular Season") %>% group_by(idPlayer) %>% summarize(variation_regular = mean(sd)), by = "idPlayer") %>%
left_join(ptreb_ast_df %>% filter(Type == "Home Games") %>% group_by(idPlayer) %>% summarize(variation_home = mean(sd)), by = "idPlayer") %>%
left_join(ptreb_ast_df %>% filter(Type == "Away Games") %>% group_by(idPlayer) %>% summarize(variation_away = mean(sd)), by = "idPlayer") %>%
left_join(ptreb_ast_df %>% filter(Type == "Last 10") %>% group_by(idPlayer) %>% summarize(variation_ten = mean(sd)), by = "idPlayer") %>%
left_join(ptreb_ast_df %>% filter(Type == "Last 5") %>% group_by(idPlayer) %>% summarize(variation_five = mean(sd)), by = "idPlayer")
ptreb_ast_df_join <- ptreb_ast_df  %>% mutate(Ident = ifelse(season_hit < .30 & Type == "Regular Season", 1,0)) %>%
group_by(namePlayer,idPlayer) %>% summarize(Ident = mean(Ident))
ptrebast_picks <- ptreb_ast_df %>% left_join(ptreb_ast_df_join, by = c("namePlayer","idPlayer")) %>%
filter(Ident != 0) %>% group_by(namePlayer, OU,Under, slugTeam,Type, avg = round(avg,1),
variation_regular = round(variation_regular,1),
variation_home = as.character(round(variation_home,1)),
variation_away = as.character(round(variation_away,1)),
variation_five = as.character(round(variation_five,1)),
variation_ten = as.character(round(variation_ten,1))) %>%
summarize(season_hit) %>% ungroup() %>% mutate(season_hit = 1-season_hit) %>%pivot_wider(names_from = Type, values_from = season_hit) %>%
left_join(teams %>% select(slugTeam,urlThumbnailTeam), by = "slugTeam") %>%
left_join(matchup %>% select(slugTeam,matchup), by = "slugTeam") %>%
relocate(urlThumbnailTeam, .after = OU) %>% relocate(matchup, .after = urlThumbnailTeam) %>%
select(!c(slugTeam,variation_home,variation_away,variation_ten,variation_five))
reactable(highlight = TRUE, ptrebast_picks, columns = list(namePlayer = colDef(name = "Player",sticky = "left", width = 110,
style = cell_style(font_weight = "bold")),
urlThumbnailTeam = colDef(name = "Team",cell = embed_img(height = "25",width="25")),
avg = colDef(name = "Season Avg"),
variation_regular = colDef(name = "Season SD"),
Under = colDef(name = "Odds"),
OU = colDef(name = "Total Points, Rebounds, Assists OU",width = 110),
`Away Games` = colDef(cell = data_bars(ptrebast_picks,
fill_color = color_set,
background = '#F1F1F1',
min_value = 0,
max_value = 1,
text_position = 'outside-end',
number_fmt = scales::percent,
bold_text = TRUE)),
`Home Games` = colDef(cell = data_bars(ptrebast_picks,
fill_color = color_set,
background = '#F1F1F1',
min_value = 0,
max_value = 1,
text_position = 'outside-end',
number_fmt = scales::percent,
bold_text = TRUE)),
`Last 10` = colDef(cell = data_bars(ptrebast_picks,
fill_color = color_set,
background = '#F1F1F1',
min_value = 0,
max_value = 1,
text_position = 'outside-end',
number_fmt = scales::percent,
bold_text = TRUE)),
`Last 5` = colDef(cell = data_bars(ptrebast_picks,
fill_color = color_set,
background = '#F1F1F1',
min_value = 0,
max_value = 1,
text_position = 'outside-end',
number_fmt = scales::percent,
bold_text = TRUE)),
`Regular Season` = colDef(cell = data_bars(ptrebast_picks,
fill_color = color_set,
background = '#F1F1F1',
min_value = 0,
max_value = 1,
text_position = 'outside-end',
number_fmt = scales::percent,
bold_text = TRUE))),
theme = fivethirtyeight(), defaultPageSize = 20, fullWidth = TRUE) %>% add_title("Under Success Rates") %>% add_subtitle("2024/25 Regular Season")
##Assists
ast <- lapply(next_team_batch$idPlayer, function(x){
hit_rate <- seq(0.5,13.5,1)
sd <- sd(playerdata %>% filter(idPlayer == x, typeSeason == "Regular Season", slugSeason == "2024-25")  %>%
pull(ast))
df <- playerdata %>% filter(idPlayer == x, typeSeason == "Regular Season", slugSeason == "2024-25") %>%
mutate(ast_reb_ast = ast+treb+ast) %>% select(namePlayer,idPlayer,slugTeam,dateGame,locationGame,ast)
hit_rate_above <- lapply(hit_rate, function(x){
df %>% mutate(test = mean(ast > x), OU = x) %>% group_by(namePlayer, idPlayer, OU) %>% summarize(test = min(test), sd = sd, .groups = 'drop') %>%
ungroup()
})
hit_rate_above
})
ast <- bind_rows(ast) %>% unnest(cols = everything()) %>% mutate(Type = "Regular Season")
##Assists Home Games
ast_home <- lapply(next_team_batch$idPlayer, function(x){
hit_rate <- seq(0.5,13.5,1)
sd <- sd(playerdata %>% filter(idPlayer == x, typeSeason == "Regular Season", slugSeason == "2024-25", locationGame == "H")  %>%
pull(ast))
df <- playerdata %>% filter(idPlayer == x, typeSeason == "Regular Season", slugSeason == "2024-25", locationGame == "H") %>%
mutate(ast_reb_ast = ast+treb+ast) %>% select(namePlayer,idPlayer,slugTeam,dateGame,locationGame,ast)
hit_rate_above <- lapply(hit_rate, function(x){
df %>% mutate(test = mean(ast > x), OU = x) %>% group_by(namePlayer, idPlayer, OU) %>% summarize(test = min(test), sd = sd, .groups = 'drop') %>%
ungroup()
})
hit_rate_above
})
ast_home <- bind_rows(ast_home) %>% unnest(cols = everything()) %>% mutate(Type = "Home Games")
##Assists Away Games
ast_away <- lapply(next_team_batch$idPlayer, function(x){
hit_rate <- seq(0.5,13.5,1)
sd <- sd(playerdata %>% filter(idPlayer == x, typeSeason == "Regular Season", slugSeason == "2024-25", locationGame == "A") %>%
pull(ast))
df <- playerdata %>% filter(idPlayer == x, typeSeason == "Regular Season", slugSeason == "2024-25", locationGame == "A") %>%
mutate(ast_reb_ast = ast+treb+ast) %>% select(namePlayer,idPlayer,slugTeam,dateGame,locationGame,ast)
hit_rate_above <- lapply(hit_rate, function(x){
df %>% mutate(test = mean(ast > x), OU = x) %>% group_by(namePlayer, idPlayer, OU) %>% summarize(test = min(test), sd = sd, .groups = 'drop') %>%
ungroup()
})
hit_rate_above
})
ast_away <- bind_rows(ast_home) %>% unnest(cols = everything()) %>% mutate(Type = "Away Games")
##Assists Last 10
ast_ten <- lapply(next_team_batch$idPlayer, function(x){
hit_rate <- seq(0.5,13.5,1)
sd <- sd(playerdata %>% filter(idPlayer == x, typeSeason == "Regular Season", slugSeason == "2024-25") %>% arrange(desc(dateGame)) %>% head(10) %>%
pull(ast))
df <- playerdata %>% filter(idPlayer == x, typeSeason == "Regular Season", slugSeason == "2024-25") %>%
mutate(ast_reb_ast = ast+treb+ast) %>% select(namePlayer,idPlayer,slugTeam,dateGame,locationGame,ast) %>% arrange(desc(dateGame)) %>% head(10)
hit_rate_above <- lapply(hit_rate, function(x){
df %>% mutate(test = mean(ast > x), OU = x) %>% group_by(namePlayer, idPlayer, OU) %>% summarize(test = min(test), sd = sd, .groups = 'drop') %>%
ungroup()
})
hit_rate_above
})
ast_ten <- bind_rows(ast_ten) %>% unnest(cols = everything()) %>% mutate(Type = "Last 10")
##Assists Last 5
ast_five <- lapply(next_team_batch$idPlayer, function(x){
hit_rate <- seq(0.5,13.5,1)
sd <- sd(playerdata %>% filter(idPlayer == x, typeSeason == "Regular Season", slugSeason == "2024-25") %>% arrange(desc(dateGame)) %>% head(5) %>%
pull(ast))
df <- playerdata %>% filter(idPlayer == x, typeSeason == "Regular Season", slugSeason == "2024-25") %>%
mutate(ast_reb_ast = ast+treb+ast) %>% select(namePlayer,idPlayer,slugTeam,dateGame,locationGame,ast) %>% arrange(desc(dateGame)) %>% head(5)
hit_rate_above <- lapply(hit_rate, function(x){
df %>% mutate(test = mean(ast > x), OU = x) %>% group_by(namePlayer, idPlayer, OU) %>% summarize(test = min(test), sd = sd, .groups = 'drop') %>%
ungroup()
})
hit_rate_above
})
ast_five <- bind_rows(ast_five) %>% unnest(cols = everything()) %>% mutate(Type = "Last 5")
ast_df <- bind_rows(ast,ast_away,ast_home,ast_five,ast_ten)
ast_df$namePlayer <- stri_trans_general(str = ast_df$namePlayer, id = "Latin-ASCII")
ast_df <- ast_df %>% left_join(dk_ast, by = c("namePlayer","OU")) %>% filter(!is.na(Over)) %>% rename(season_hit = test) %>%
left_join(playerdata %>% filter(typeSeason == "Regular Season", slugSeason == "2024-25") %>% group_by(idPlayer) %>%
summarize(avg = mean(ast)), by = "idPlayer") %>%
left_join(ast_df %>% filter(Type == "Regular Season") %>% group_by(idPlayer) %>%
summarize(variation_regular = mean(sd)), by = "idPlayer")
ast_df_join <- ast_df  %>% mutate(Ident = ifelse(season_hit < .30 & Type == "Regular Season", 1,0)) %>%
group_by(namePlayer,idPlayer) %>% summarize(Ident = mean(Ident))
ast_picks <- ast_df %>% left_join(ast_df_join, by = c("namePlayer","idPlayer")) %>%
filter(Ident != 0) %>% group_by(namePlayer,idPlayer, OU, Under, Type, avg = round(avg,1),
variation_regular = round(variation_regular,1)) %>%
summarize(season_hit) %>% ungroup() %>% mutate(season_hit = 1 - season_hit) %>%
pivot_wider(names_from = Type, values_from = season_hit) %>% left_join(all_rosters %>% select(idPlayer,slugTeam), by = "idPlayer") %>%
left_join(teams %>% select(slugTeam,urlThumbnailTeam), by = "slugTeam") %>%
left_join(matchup %>% select(slugTeam,matchup), by = "slugTeam") %>%
relocate(urlThumbnailTeam, .after = namePlayer) %>% relocate(matchup, .after = urlThumbnailTeam) %>% select(-c(slugTeam,idPlayer))
reactable(highlight = TRUE, striped = TRUE,ast_picks, columns = list(namePlayer = colDef(name = "Player",sticky = "left", width = 110),
urlThumbnailTeam = colDef(name = "Team",cell = embed_img(height = "25",width="25")),
avg = colDef(name = "Season Avg"),
variation_regular = colDef(name = "Season SD"),
Under = colDef(name = "Odds"),
OU = colDef(name = "Total Assists O/U",width = 110),
`Away Games` = colDef(cell = data_bars(ast_picks,
fill_color = color_set,
background = '#F1F1F1',
min_value = 0,
max_value = 1,
text_position = 'outside-end',
number_fmt = scales::percent)),
`Home Games` = colDef(cell = data_bars(ast_picks,
fill_color = color_set,
background = '#F1F1F1',
min_value = 0,
max_value = 1,
text_position = 'outside-end',
number_fmt = scales::percent)),
`Last 10` = colDef(cell = data_bars(ast_picks,
fill_color = color_set,
background = '#F1F1F1',
min_value = 0,
max_value = 1,
text_position = 'outside-end',
number_fmt = scales::percent)),
`Last 5` = colDef(cell = data_bars(ast_picks,
fill_color = color_set,
background = '#F1F1F1',
min_value = 0,
max_value = 1,
text_position = 'outside-end',
number_fmt = scales::percent)),
`Regular Season` = colDef(cell = data_bars(ast_picks,
fill_color = color_set,
background = '#F1F1F1',
min_value = 0,
max_value = 1,
text_position = 'outside-end',
number_fmt = scales::percent))),
theme = fivethirtyeight(), defaultPageSize = 20, fullWidth = TRUE) %>% add_title("Under Success Rates") %>% add_subtitle("2024/25 Regular Season")
library(tidyverse)
library(nbastatR)
library(dplyr)
library(flexdashboard)
library(parallel)
library(rvest)
library(stringr)
library(caret)
library(ggplot2)
library(ggpubr)
library(knitr)
library(data.table)
library(broom)
library(grid)
library(gridExtra)
library(grDevices)
library(reactablefmtr)
library(formattable)
library(markdown)
library(magick)
library(highcharter)
library(extrafont)
library(cowplot)
library(fmsb)
library(shiny)
library(fontawesome)
library(bslib)
library(plotly)
library(ggbreak)
rosters <- read.csv("C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/rosters.csv")
rosters_id <- rosters %>% filter(Include == "Y") %>% pull(idPlayer)
rosters_names <- rosters %>% filter(Include == "Y") %>% pull(namePlayer)
rosters_teams <- rosters %>% filter(Include == "Y") %>% pull(idTeam)
##Date used for schedule
scheduleDate <- "2024-10-01"
#Season Identifier
current_season <- "2024-25"
last_season <- "2023-24"
season_current <- 2025
season_previous <- 2024
Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2)
gamedata <- game_logs(seasons = season_previous, result_types = "team", season_types = c("Regular Season","Playoffs"))
gamedata_current <- game_logs(seasons = season_current, result_types = "team", season_types = c("Regular Season"))
gamedata <- bind_rows(gamedata,gamedata_current)
all_rosters <- seasons_rosters(seasons = season_current, return_message = FALSE)
playerdata <- game_logs(seasons = season_previous:season_current, result_types = "player", season_types = c("Regular Season"))
playerdata_playoffs <- game_logs(seasons = season_previous, result_types = "player", season_types = c("Playoffs"))
playerdata <- bind_rows(playerdata, playerdata_playoffs)
player_name <- function(x){
playerdata %>% filter(idPlayer == x) %>%
select(dateGame, idGame, slugOpponent, idPlayer, namePlayer, fgm,fga,pts,treb,ast,stl,blk,fg3m,fg3a,tov,
plusminus,minutes,locationGame, countDaysRestPlayer, isB2B, isB2BFirst, isB2BSecond) %>% group_by(namePlayer) %>% summarize(n = n()) %>% pull(namePlayer)
}
player_name <- lapply(rosters_id,player_name)
players <- player_name
players <- unlist(players)
gameids<- playerdata %>% group_by(idGame) %>% summarize(n = n()) %>% pull(idGame)
numcores <- parallelly::availableCores()
cl <- makeCluster(numcores)
my_function <- function(x) {
library(tidyverse)
library(nbastatR)
play_play <- play_by_play_v2(game_ids = x,nest_data = F)
}
results <- parLapply(cl,gameids,my_function)
play_play <- bind_rows(results)
stopCluster(cl)
#Schedule
teams <- nba_teams(league = "NBA")
teams <- teams %>% filter(idLeague == 2, idConference != 0) %>% select(cityTeam, slugTeam, idTeam, nameTeam, urlThumbnailTeam) %>% rename(Opponent = cityTeam)
slugteams <- teams %>% select(slugTeam)
slugteams_list <- slugteams %>% mutate(slugTeam = tolower(slugTeam)) %>%
mutate(slugTeam = ifelse(slugTeam == "uta","utah",
ifelse(slugTeam == "nop","no",slugTeam))) %>% pull(slugTeam)
schedule <- lapply(slugteams_list, function(x){
testurl <- paste0("https://www.espn.com/nba/team/schedule/_/name/",x,"/seasontype/2")
h <- read_html(testurl)
tab <- h |> html_nodes("table")
tab <- tab[[1]] |> html_table()
tab <- tab |> setNames(c("Date", "Opponenet", "Time", "TV","Tickets","Tickets_dup","Unused1","Unused2"))
tab <- tab[-(1:2),]
tab <- tab %>% mutate(location = ifelse(str_detect(Opponenet,"@"),"Away","Home")) %>%
mutate(Opponent = ifelse(location == "Home", str_sub(Opponenet,3),str_sub(Opponenet,2))) %>%
mutate(Date = str_extract(Date, '\\b[^,]+$')) %>% mutate(Date = as.Date(Date, "%b%d")) %>%
mutate(Date = if_else(Date < scheduleDate,Date %m+% years(1),Date)) %>% select(Date,location,Opponent)
tab <- tab %>% left_join(teams, by = "Opponent") %>% mutate(Team = toupper(x)) %>%
mutate(Team = ifelse(Team == "UTAH","UTA",ifelse(Team == "NO","NOP",Team))) %>% mutate(next_game = ifelse(Date >= Sys.Date()+1,TRUE,FALSE)) %>%
mutate(game_number = 1:n())
})
schedule <- bind_rows(schedule)
schedule <- schedule %>% filter(!is.na(Date))
conference <- unnest(bref_teams_stats(seasons = season_current))
conference <- gamedata %>% group_by(nameTeam,slugTeam) %>% summarize(n = n()) %>%
left_join(conference %>% mutate(nameTeam = ifelse(nameTeam == "Los Angeles Clippers","LA Clippers",nameTeam)) %>%
group_by(nameTeam,nameConference) %>% summarize(n = n()), by = "nameTeam")
all_players <- as.data.frame(players) %>% rename(namePlayer = players) %>%
left_join(playerdata %>% filter(slugSeason == current_season) %>% group_by(namePlayer,idPlayer,slugTeam) %>% summarize(n = n()), by = "namePlayer") %>%
select(namePlayer,idPlayer,n) %>% ungroup()
all_players_previous <- schedule %>% filter(Date == schedule %>% filter(next_game == TRUE) %>% pull(Date) %>% min -1) %>% pull(slugTeam)
all_players_previous_batch <- lapply(all_players_previous, function(x){
rosters %>% left_join(all_rosters %>% select(slugTeam,idPlayer), by = "idPlayer") %>% filter(slugTeam.y == x) %>% filter(Include == "Y") %>% select(idPlayer,namePlayer)
})
all_players_previous_batch <- bind_rows(all_players_previous_batch)
all_players_previous_batch <- all_players_previous_batch %>%
left_join(playerdata %>% filter(slugSeason == current_season) %>% group_by(namePlayer,idPlayer,slugTeam) %>% summarize(n = n()), by = "idPlayer") %>% select(idPlayer,namePlayer.y) %>%
rename(namePlayer = namePlayer.y) %>% group_by(idPlayer,namePlayer) %>% summarize(n = n()) %>% as.data.frame()
wix_jobs <- write.csv(as.data.frame(players) %>% rename(namePlayer = players) %>%
left_join(playerdata %>% filter(slugSeason == current_season) %>% group_by(namePlayer,idPlayer) %>%
summarize(n = n()), by = "namePlayer") %>%
left_join(all_rosters %>% select(numberJersey,countYearsExperience,weightLBS,heightInches,agePlayer,groupPosition,idPlayer,slugTeam) %>%
mutate(heightInches = paste0(floor(heightInches/12),"'",round(((heightInches/12)-floor(heightInches/12))*12,0),"\"")), by = "idPlayer") %>%
left_join(playerdata %>% group_by(idPlayer,urlPlayerHeadshot) %>% summarize(n = n()), by = "idPlayer") %>% left_join(teams, by = "slugTeam")  %>%
select(namePlayer, idPlayer, nameTeam,urlPlayerHeadshot,numberJersey,countYearsExperience,weightLBS,heightInches,agePlayer,groupPosition) %>%
mutate(urlPlayerHeadshot = paste0("{\"nodes\":[{\"type\":\"PARAGRAPH\",\"id\":\"hlkd5116\",\"nodes\":[],\"paragraphData\":{}},{\"type\":\"HTML\",\"id\":\"cps99115\",\"nodes\":[],\"htmlData\":{\"containerData\":{\"textWrap\":true,\"height\":{\"custom\":\"219\"},\"spoiler\":{},\"alignment\":\"CENTER\",\"width\":{\"custom\":\"265\"}},\"url\":\"",urlPlayerHeadshot,"\"",",\"source\":\"HTML\"}},{\"type\":\"PARAGRAPH\",\"id\":\"zuhhp117\",\"nodes\":[],\"paragraphData\":{}}],\"metadata\":{\"version\":1,\"createdTimestamp\":\"2022-12-19T17:56:18.279Z\",\"updatedTimestamp\":\"2022-12-19T17:56:18.279Z\",\"id\":\"857a69b7-4e6b-4821-973a-064010acd74b\"},\"documentStyle\":{}}")) %>% mutate(HTML = paste0("{\"nodes\":[{\"type\":\"PARAGRAPH\",\"id\":\"hlkd5116\",\"nodes\":[],\"paragraphData\":{}},{\"type\":\"HTML\",\"id\":\"cps99115\",\"nodes\":[],\"htmlData\":{\"containerData\":{\"textWrap\":true,\"height\":{\"custom\":\"1000\"},\"spoiler\":{},\"alignment\":\"CENTER\",\"width\":{\"custom\":\"1800\"}},\"url\":\"https://raw.githack.com/backironanalytics/my-site-test/main/sheets/",idPlayer,substr(idPlayer,start = 1, stop =3),".html\",\"source\":\"HTML\"}},{\"type\":\"PARAGRAPH\",\"id\":\"zuhhp117\",\"nodes\":[],\"paragraphData\":{}}],\"metadata\":{\"version\":1,\"createdTimestamp\":\"2022-12-19T17:56:18.279Z\",\"updatedTimestamp\":\"2022-12-19T17:56:18.279Z\",\"id\":\"857a69b7-4e6b-4821-973a-064010acd74b\"},\"documentStyle\":{}}"))%>% mutate(numberJersey = paste0("Number: ",numberJersey), agePlayer = paste0("Age: ",agePlayer),groupPosition = paste0("Position: ",groupPosition), countYearsExperience = paste0("Experience: ",countYearsExperience," Years"), heightInches = paste0("Height: ",heightInches), weightLBS = paste0("Weight: ",weightLBS," lbs") ) %>% relocate(urlPlayerHeadshot, .after = HTML) %>% select(-idPlayer),"C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/jobs_test2.csv")
library(foreach)
Sys.setenv(RSTUDIO_PANDOC="C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools")
all_players_previous_batch$idPlayer
cl <- makeCluster(5)
doParallel::registerDoParallel(cl)
foreach(j = all_players_previous_batch$idPlayer[1:5],.packages = c("flexdashboard",
"tidyverse",
"dplyr",
"knitr",
"ggplot2",
"stringr",
"caret",
"reactablefmtr",
"formattable",
"markdown",
"magick",
"highcharter",
"cowplot",
"extrafont",
"data.table",
"broom",
"grid",
"gridExtra",
"grDevices",
"fmsb",
"fontawesome",
"bslib",
"plotly",
"ggbreak",
"nbastatR",
"rvest",
"ggpubr"
),.export = ls(globalenv())) %dopar% {
rmarkdown::render(input = 'C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/ML_Parlay_TBRv15_2025.Rmd',
output_file = paste0(j,substr(j,start = 1,stop=3),".html"),
output_dir = file.path('C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/sheets'),
params = list(id = j))
}
stopCluster(cl)
cl <- makeCluster(3)
doParallel::registerDoParallel(cl)
foreach(j = all_players_previous_batch$idPlayer[1:5],.packages = c("flexdashboard",
"tidyverse",
"dplyr",
"knitr",
"ggplot2",
"stringr",
"caret",
"reactablefmtr",
"formattable",
"markdown",
"magick",
"highcharter",
"cowplot",
"extrafont",
"data.table",
"broom",
"grid",
"gridExtra",
"grDevices",
"fmsb",
"fontawesome",
"bslib",
"plotly",
"ggbreak",
"nbastatR",
"rvest",
"ggpubr"
),.export = ls(globalenv())) %dopar% {
rmarkdown::render(input = 'C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/ML_Parlay_TBRv15_2025.Rmd',
output_file = paste0(j,substr(j,start = 1,stop=3),".html"),
output_dir = file.path('C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/sheets'),
params = list(id = j))
}
stopCluster(cl)
cl <- makeCluster(3)
doParallel::registerDoParallel(cl)
foreach(j = all_players_previous_batch$idPlayer[31:35],.packages = c("flexdashboard",
"tidyverse",
"dplyr",
"knitr",
"ggplot2",
"stringr",
"caret",
"reactablefmtr",
"formattable",
"markdown",
"magick",
"highcharter",
"cowplot",
"extrafont",
"data.table",
"broom",
"grid",
"gridExtra",
"grDevices",
"fmsb",
"fontawesome",
"bslib",
"plotly",
"ggbreak",
"nbastatR",
"rvest",
"ggpubr"
),.export = ls(globalenv())) %dopar% {
rmarkdown::render(input = 'C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/ML_Parlay_TBRv15_2025.Rmd',
output_file = paste0(j,substr(j,start = 1,stop=3),".html"),
output_dir = file.path('C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/sheets'),
params = list(id = j))
}
stopCluster(cl)
