mutate(slugTeam = ifelse(slugTeam == "uta","utah",
ifelse(slugTeam == "nop","no",slugTeam))) %>% pull(slugTeam)
schedule <- lapply(slugteams_list, function(x){
testurl <- paste0("https://www.espn.com/nba/team/schedule/_/name/",x,"/seasontype/2")
h <- read_html(testurl)
tab <- h |> html_nodes("table")
tab <- tab[[1]] |> html_table()
tab <- tab |> setNames(c("Date", "Opponenet", "Time", "TV","Tickets","Tickets_dup","Unused1","Unused2"))
tab <- tab[-(1:2),]
tab <- tab %>% mutate(location = ifelse(str_detect(Opponenet,"@"),"Away","Home")) %>%
mutate(Opponent = ifelse(location == "Home", str_sub(Opponenet,3),str_sub(Opponenet,2))) %>%
mutate(Date = str_extract(Date, '\\b[^,]+$')) %>% mutate(Date = as.Date(Date, "%b%d")) %>% select(Date,location,Opponent)
tab <- tab %>% left_join(teams, by = "Opponent") %>% mutate(Team = toupper(x)) %>%
mutate(Team = ifelse(Team == "UTAH","UTA",ifelse(Team == "NO","NOP",Team))) %>% mutate(next_game = ifelse(Date >= Sys.Date(),TRUE,FALSE)) %>%
mutate(game_number = 1:n())
})
schedule <- bind_rows(schedule)
next_game_date_teams <- schedule %>% filter(Date == schedule %>% filter(next_game == TRUE) %>% pull(Date) %>% min) %>% pull(slugTeam)
next_team_batch <- lapply(next_game_date_teams, function(x){
rosters %>% filter(slugTeam == x) %>% filter(Include == "Y") %>% select(idPlayer,namePlayer)
})
next_team_batch <- bind_rows(next_team_batch) %>% pull(namePlayer)
wix_jobs <- write.csv(as.data.frame(players) %>% rename(namePlayer = players) %>% left_join(playerdata %>% group_by(namePlayer,slugTeam) %>% summarize(n = n()), by = "namePlayer") %>% select(namePlayer,slugTeam) %>% left_join(teams, by = "slugTeam") %>% select(namePlayer, nameTeam) %>% mutate(HTML = paste0("{\"nodes\":[{\"type\":\"PARAGRAPH\",\"id\":\"hlkd5116\",\"nodes\":[],\"paragraphData\":{}},{\"type\":\"HTML\",\"id\":\"cps99115\",\"nodes\":[],\"htmlData\":{\"containerData\":{\"textWrap\":true,\"height\":{\"custom\":\"1000\"},\"spoiler\":{},\"alignment\":\"CENTER\",\"width\":{\"custom\":\"1500\"}},\"url\":\"https://raw.githack.com/backironanalytics/my-site-test/main/sheets/",gsub("^(.*?)\\s.*", "\\1",namePlayer),"%20",gsub("^\\S+ ", "",namePlayer),".html\",\"source\":\"HTML\"}},{\"type\":\"PARAGRAPH\",\"id\":\"zuhhp117\",\"nodes\":[],\"paragraphData\":{}}],\"metadata\":{\"version\":1,\"createdTimestamp\":\"2022-12-19T17:56:18.279Z\",\"updatedTimestamp\":\"2022-12-19T17:56:18.279Z\",\"id\":\"857a69b7-4e6b-4821-973a-064010acd74b\"},\"documentStyle\":{}}")),"jobs_test2.csv")
for (i in players) {
rmarkdown::render(input = 'C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/ML_Parlay_TBRv9_2025.Rmd',
output_file = paste0(i,".html"),
output_dir = file.path('C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/sheets'),
params = list(player = i))
}
player_q1
shot_summary
team
player <- team %>% filter(idPlayer == player_id[1], numberPeriod <= 4) %>%
mutate(x = as.numeric(as.character(locationX)) / 10, y = as.numeric(as.character(locationY)) / 10 + hoop_center_y)
player
shot_summary
library(tidyverse)
library(nbastatR)
library(stringr)
library(caret)
library(ggplot2)
library(ggpubr)
library(knitr)
library(data.table)
library(broom)
library(grid)
library(gridExtra)
library(grDevices)
library(reactablefmtr)
library(formattable)
library(markdown)
library(magick)
library(highcharter)
library(extrafont)
library(cowplot)
library(fmsb)
library(shiny)
library(fontawesome)
library(dplyr)
library(flexdashboard)
Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2)
gamedata <- game_logs(seasons = 2025, result_types = "team", season_types = c("Regular Season"))
playerdata <- game_logs(seasons = 2025, result_types = "player", season_types = c("Regular Season"))
season <- playerdata %>% pull(slugSeason)
player_id <- playerdata %>% filter(str_detect(namePlayer,params$player)) %>%
select(dateGame, idGame, slugOpponent, idPlayer, namePlayer, fgm,fga,pts,treb,ast,stl,blk,fg3m,fg3a,tov,
plusminus,minutes,locationGame, countDaysRestPlayer, isB2B, isB2BFirst, isB2BSecond) %>% pull(idPlayer)
slugteam <- playerdata %>% filter(str_detect(namePlayer,params$player)) %>% pull(slugTeam)
gameids<- playerdata %>% filter(idPlayer == player_id)%>% group_by(idGame) %>% summarize(n = n()) %>% pull(idGame)
player_data <- playerdata %>% filter(idPlayer == player_id[1]) %>%
select(dateGame, idGame, slugOpponent, idPlayer, namePlayer, fgm,fga,pts,treb,ast,stl,blk,fg3m,fg3a,tov,
plusminus,minutes,locationGame, countDaysRestPlayer, isB2B, isB2BFirst, isB2BSecond, slugSeason,typeSeason, urlPlayerHeadshot)
team_id <- playerdata %>% filter(idPlayer == player_id) %>%
select(dateGame, idGame, slugOpponent, idPlayer, namePlayer, fgm,fga,pts,treb,ast,stl,blk,fg3m,fg3a,tov,
plusminus,minutes,locationGame, countDaysRestPlayer, isB2B, isB2BFirst, isB2BSecond,idTeam) %>% group_by(idTeam) %>% summarize(n = n()) %>% pull(idTeam)
team_id_most_recent <- playerdata %>% filter(idPlayer == player_id) %>%
select(dateGame, idGame, slugOpponent, idPlayer, namePlayer, fgm,fga,pts,treb,ast,stl,blk,fg3m,fg3a,tov,
plusminus,minutes,locationGame, countDaysRestPlayer, isB2B, isB2BFirst, isB2BSecond,idTeam) %>% arrange(desc(dateGame)) %>% head(1) %>% pull(idTeam)
team_colors <- nba_teams(league = "NBA")
team_colors <- team_colors %>% filter(idTeam == team_id_most_recent) %>% select(colorsTeam)
photo <- playerdata %>% filter(idPlayer == player_id[1]) %>% head(1) %>% pull(urlPlayerHeadshot)
logos <- nba_teams(league = "NBA")
logos <- logos %>% filter(isNonNBATeam == 0) %>% select(idTeam,slugTeam,urlThumbnailTeam)
split_colors <- str_split_fixed(team_colors$colorsTeam,', ',5)
primary_color <- split_colors[,1]
secondary_color <- split_colors[,2]
third_color <- split_colors[,3]
primary_color <- "#FF204E"
secondary_color <- "#333A73"
league_leaders_reg_season <- metrics_leaders(seasons = 2025,  season_types = "Regular Season", modes = "PerGame", return_message = T, metric = "pts")
#gamedata <- gamedata %>% filter(idTeam == team_id)
most_recent = playerdata %>% filter(idPlayer == player_id) %>%
select(dateGame, idGame, slugOpponent, idPlayer, namePlayer, fgm,fga,pts,treb,ast,stl,blk,fg3m,fg3a,tov,
plusminus,minutes,locationGame, countDaysRestPlayer, isB2B, isB2BFirst, isB2BSecond) %>% slice(which.max(dateGame)) %>% pull(dateGame)
rest = as.integer(Sys.Date() - most_recent - 1)
next_opponent_table <- schedule %>% filter(Team == slugteam[1])
next_opponent <- next_opponent_table[1, ] %>% pull(slugTeam)
next_location <- substring(next_opponent_table[1, ] %>% pull(location),1,1)
join <- team %>% filter(numberPeriod <= 4) %>%
group_by(zoneBasic, numberPeriod) %>% summarize(n = n())
join <- team %>% filter(numberPeriod <= 4) %>%
group_by(zoneBasic, numberPeriod) %>% summarize(n = n())
join
shot_summary
shot_summary <- player %>% select(zoneBasic,nameZone,slugZone,distanceShot,isShotAttempted,isShotMade,typeAction,typeShot,namePlayer) %>% group_by(zoneBasic,numberPeriod,namePlayer) %>% summarize(attempts = n(),makes = sum(isShotMade,na.rm = TRUE)) %>% mutate(misses = attempts - makes,fg = makes/attempts)
player <- team %>% filter(idPlayer == player_id[1], numberPeriod <= 4) %>%
mutate(x = as.numeric(as.character(locationX)) / 10, y = as.numeric(as.character(locationY)) / 10 + hoop_center_y)
shot_summary <- player %>% select(zoneBasic,nameZone,slugZone,distanceShot,isShotAttempted,isShotMade,typeAction,typeShot,namePlayer) %>% group_by(zoneBasic,numberPeriod,namePlayer) %>% summarize(attempts = n(),makes = sum(isShotMade,na.rm = TRUE)) %>% mutate(misses = attempts - makes,fg = makes/attempts)
player
join
shot_summary <- player %>% select(zoneBasic,nameZone,slugZone,distanceShot,isShotAttempted,isShotMade,typeAction,typeShot,namePlayer) %>% group_by(zoneBasic,numberPeriod,namePlayer) %>% summarize(attempts = n(),makes = sum(isShotMade,na.rm = TRUE)) %>% mutate(misses = attempts - makes,fg = makes/attempts)
library(tidyverse)
library(nbastatR)
library(dplyr)
library(flexdashboard)
library(parallel)
library(rvest)
rosters <- read.csv("rosters.csv")
rosters_id <- rosters %>% filter(Include == "Y") %>% pull(idPlayer)
rosters_names <- rosters %>% filter(Include == "Y") %>% pull(namePlayer)
rosters_teams <- rosters %>% filter(Include == "Y") %>% pull(idTeam)
Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2)
all_rosters <- seasons_rosters(seasons = 2025, return_message = FALSE)
playerdata <- game_logs(seasons = 2025, result_types = "player", season_types = c("Regular Season"))
player_name <- function(x){
playerdata %>% filter(idPlayer == x) %>%
select(dateGame, idGame, slugOpponent, idPlayer, namePlayer, fgm,fga,pts,treb,ast,stl,blk,fg3m,fg3a,tov,
plusminus,minutes,locationGame, countDaysRestPlayer, isB2B, isB2BFirst, isB2BSecond) %>% group_by(namePlayer) %>% summarize(n = n()) %>% pull(namePlayer)
}
player_name <- lapply(rosters_id,player_name)
players <- player_name
players <- unlist(players)
gameids<- playerdata %>% group_by(idGame) %>% summarize(n = n()) %>% pull(idGame)
numcores <- parallelly::availableCores()
cl <- makeCluster(numcores)
my_function <- function(x) {
library(tidyverse)
library(nbastatR)
play_play <- play_by_play_v2(game_ids = x,nest_data = F)
}
results <- parLapply(cl,gameids,my_function)
play_play <- bind_rows(results)
stopCluster(cl)
#Schedule
teams <- nba_teams(league = "NBA")
teams <- teams %>% filter(isNonNBATeam == 0, idConference != 0) %>% select(cityTeam, slugTeam, idTeam, nameTeam, urlThumbnailTeam) %>% rename(Opponent = cityTeam)
slugteams <- teams %>% select(slugTeam)
slugteams_list <- slugteams %>% mutate(slugTeam = tolower(slugTeam)) %>%
mutate(slugTeam = ifelse(slugTeam == "uta","utah",
ifelse(slugTeam == "nop","no",slugTeam))) %>% pull(slugTeam)
schedule <- lapply(slugteams_list, function(x){
testurl <- paste0("https://www.espn.com/nba/team/schedule/_/name/",x,"/seasontype/2")
h <- read_html(testurl)
tab <- h |> html_nodes("table")
tab <- tab[[1]] |> html_table()
tab <- tab |> setNames(c("Date", "Opponenet", "Time", "TV","Tickets","Tickets_dup","Unused1","Unused2"))
tab <- tab[-(1:2),]
tab <- tab %>% mutate(location = ifelse(str_detect(Opponenet,"@"),"Away","Home")) %>%
mutate(Opponent = ifelse(location == "Home", str_sub(Opponenet,3),str_sub(Opponenet,2))) %>%
mutate(Date = str_extract(Date, '\\b[^,]+$')) %>% mutate(Date = as.Date(Date, "%b%d")) %>% select(Date,location,Opponent)
tab <- tab %>% left_join(teams, by = "Opponent") %>% mutate(Team = toupper(x)) %>%
mutate(Team = ifelse(Team == "UTAH","UTA",ifelse(Team == "NO","NOP",Team))) %>% mutate(next_game = ifelse(Date >= Sys.Date(),TRUE,FALSE)) %>%
mutate(game_number = 1:n())
})
schedule <- bind_rows(schedule)
next_game_date_teams <- schedule %>% filter(Date == schedule %>% filter(next_game == TRUE) %>% pull(Date) %>% min) %>% pull(slugTeam)
next_team_batch <- lapply(next_game_date_teams, function(x){
rosters %>% filter(slugTeam == x) %>% filter(Include == "Y") %>% select(idPlayer,namePlayer)
})
next_team_batch <- bind_rows(next_team_batch) %>% pull(namePlayer)
wix_jobs <- write.csv(as.data.frame(players) %>% rename(namePlayer = players) %>% left_join(playerdata %>% group_by(namePlayer,slugTeam) %>% summarize(n = n()), by = "namePlayer") %>% select(namePlayer,slugTeam) %>% left_join(teams, by = "slugTeam") %>% select(namePlayer, nameTeam) %>% mutate(HTML = paste0("{\"nodes\":[{\"type\":\"PARAGRAPH\",\"id\":\"hlkd5116\",\"nodes\":[],\"paragraphData\":{}},{\"type\":\"HTML\",\"id\":\"cps99115\",\"nodes\":[],\"htmlData\":{\"containerData\":{\"textWrap\":true,\"height\":{\"custom\":\"1000\"},\"spoiler\":{},\"alignment\":\"CENTER\",\"width\":{\"custom\":\"1500\"}},\"url\":\"https://raw.githack.com/backironanalytics/my-site-test/main/sheets/",gsub("^(.*?)\\s.*", "\\1",namePlayer),"%20",gsub("^\\S+ ", "",namePlayer),".html\",\"source\":\"HTML\"}},{\"type\":\"PARAGRAPH\",\"id\":\"zuhhp117\",\"nodes\":[],\"paragraphData\":{}}],\"metadata\":{\"version\":1,\"createdTimestamp\":\"2022-12-19T17:56:18.279Z\",\"updatedTimestamp\":\"2022-12-19T17:56:18.279Z\",\"id\":\"857a69b7-4e6b-4821-973a-064010acd74b\"},\"documentStyle\":{}}")),"jobs_test2.csv")
for (i in players) {
rmarkdown::render(input = 'C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/ML_Parlay_TBRv9_2025.Rmd',
output_file = paste0(i,".html"),
output_dir = file.path('C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/sheets'),
params = list(player = i))
}
player
shot_summary <- player %>% select(zoneBasic,nameZone,slugZone,distanceShot,isShotAttempted,isShotMade,typeAction,typeShot,namePlayer,numberPeriod) %>% group_by(zoneBasic,numberPeriod,namePlayer) %>% summarize(attempts = n(),makes = sum(isShotMade,na.rm = TRUE)) %>% mutate(misses = attempts - makes,fg = makes/attempts)
shot_summary
shot_summary <- join %>% left_join(shot_summary, by = c("zoneBasic","numberPeriod")) %>% replace(is.na(.),0)
join
shot_summary
join <- team %>% filter(numberPeriod <= 4) %>%
group_by(zoneBasic, numberPeriod) %>% summarize(n = n()) %>% mutate(numberPeriod = as.character(numberPeriod))
join
player <- team %>% filter(idPlayer == player_id[1], numberPeriod <= 4) %>%
mutate(x = as.numeric(as.character(locationX)) / 10, y = as.numeric(as.character(locationY)) / 10 + hoop_center_y) %>% mutate(numberPeriod = as.character(numberPeriod))
shot_summary <- player %>% select(zoneBasic,nameZone,slugZone,distanceShot,isShotAttempted,isShotMade,typeAction,typeShot,namePlayer,numberPeriod) %>% group_by(zoneBasic,numberPeriod,namePlayer) %>% summarize(attempts = n(),makes = sum(isShotMade,na.rm = TRUE)) %>% mutate(misses = attempts - makes,fg = makes/attempts)
shot_summary
shot_summary <- join %>% left_join(shot_summary, by = c("zoneBasic","numberPeriod")) %>% replace(is.na(.),0)
shot_summary <- join %>% left_join(shot_summary, by = c("zoneBasic","numberPeriod"))
shot_summary
join <- team %>% filter(numberPeriod <= 4) %>%
group_by(zoneBasic, numberPeriod) %>% summarize(n = n())
# Filter shot data for player & clean data to fit court dimensions
player <- team %>% filter(idPlayer == player_id[1], numberPeriod <= 4) %>%
mutate(x = as.numeric(as.character(locationX)) / 10, y = as.numeric(as.character(locationY)) / 10 + hoop_center_y)
shot_summary <- player %>% select(zoneBasic,nameZone,slugZone,distanceShot,isShotAttempted,isShotMade,typeAction,typeShot,namePlayer,numberPeriod) %>% group_by(zoneBasic,numberPeriod,namePlayer) %>% summarize(attempts = n(),makes = sum(isShotMade,na.rm = TRUE)) %>% mutate(misses = attempts - makes,fg = makes/attempts)
shot_summary <- join %>% left_join(shot_summary, by = c("zoneBasic","numberPeriod")) %>% select(-namePlayer) %>% replace(is.na(.),0)
shot_summary
shot_summary_2 <- as.data.frame(shot_summary %>% group_by(zoneBasic) %>% summarize(fg = fg) %>%select(zoneBasic,fg) %>% pivot_wider(names_from = zoneBasic, values_from = fg))
shot_summary_2
shot_summary_2 <- rbind(rep(1,ncol(shot_summary_2)),rep(0,ncol(shot_summary_2)),shot_summary_2)
shot_summary_2
player
shot_summary
shot_summary <- shot_summary %>% filter(numberPeriod == 1)
shot_summary_2 <- as.data.frame(shot_summary %>% group_by(namePlayer,zoneBasic) %>% summarize(fg = fg) %>%select(zoneBasic,fg) %>% pivot_wider(names_from = zoneBasic, values_from = fg)) %>% select(-namePlayer)
shot_summary <- shot_summary %>% filter(numberPeriod == 1)
shot_summary_2 <- as.data.frame(shot_summary %>% group_by(zoneBasic) %>% summarize(fg = fg) %>%select(zoneBasic,fg) %>% pivot_wider(names_from = zoneBasic, values_from = fg))
shot_summary_2 <- rbind(rep(1,ncol(shot_summary_2)),rep(0,ncol(shot_summary_2)),shot_summary_2)
shot_summary_2
shot_summary
for (i in players) {
rmarkdown::render(input = 'C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/ML_Parlay_TBRv9_2025.Rmd',
output_file = paste0(i,".html"),
output_dir = file.path('C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/sheets'),
params = list(player = i))
}
quarterly_ptsrebast
quarterly_ptsrebastpg
quarterly_ptsrebast %>% group_by(namePlayer1,idPlayer,numberPeriod,typeSeason) %>% summarize(pts = sum(pts), n = sum(n.x.x), ast = sum(assists), reb = sum(reb))  %>% mutate(ptsrebastpg = (pts+ast+reb)/n) %>% filter(typeSeason == "Regular Season", numberPeriod == 1) %>% pull(ptsrebastpg)
points_prob
games_firstqpts %>% full_join(games_firstqast, by = c("idGame","dateGame","Type")) %>% full_join(games_firstqreb, by = c("idGame","dateGame","Type"))
shot_summary_2
radarchart(shot_summary_2, axis = 1, pcol = rgb(0.2,0.5,0.5,0.9), pfcol = rgb(0,0.5,0.5,0.5) , plwd=4,cglcol="grey", cglty=1, axislabcol="grey", cglwd=1.2,vlcex=1, title = paste(params$player,"FG% Distribution Regular Season Excludes OT"))
shot_summary
shot_summary_2
join %>% left_join(shot_summary, by = c("zoneBasic","numberPeriod")) %>% select(-namePlayer) %>% replace(is.na(.),0)
shot_summary <- player %>% select(zoneBasic,nameZone,slugZone,distanceShot,isShotAttempted,isShotMade,typeAction,typeShot,namePlayer,numberPeriod) %>% group_by(zoneBasic,numberPeriod,namePlayer) %>% summarize(attempts = n(),makes = sum(isShotMade,na.rm = TRUE)) %>% mutate(misses = attempts - makes,fg = makes/attempts)
shot_summary
shot_summary <- join %>% left_join(shot_summary, by = c("zoneBasic","numberPeriod")) %>% select(-namePlayer) %>% replace(is.na(.),0)
shot_summary
as.data.frame(shot_summary %>% group_by(zoneBasic) %>% summarize(fg = fg) %>%select(zoneBasic,fg) %>% pivot_wider(names_from = zoneBasic, values_from = fg))
shot_summary
as.data.frame(shot_summary %>% group_by(zoneBasic) %>% summarize(makes = sum(makes),attemps = sum(attempts)) %>% mutate(fg = makes/attemps) %>%select(zoneBasic,fg) %>% pivot_wider(names_from = zoneBasic, values_from = fg))
as.data.frame(shot_summary %>% group_by(zoneBasic) %>% summarize(makes = sum(makes),attemps = sum(attempts)) %>% mutate(fg = makes/attemps) %>%select(zoneBasic,fg) %>% pivot_wider(names_from = zoneBasic, values_from = fg)) %>% replace(is.na(.),0)
shot_summary %>% filter(numberPeriod == 1)
for (i in players) {
rmarkdown::render(input = 'C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/ML_Parlay_TBRv9_2025.Rmd',
output_file = paste0(i,".html"),
output_dir = file.path('C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/sheets'),
params = list(player = i))
}
player_q1 <- player %>% filter(numberPeriod == 1)
shot_summary <- shot_summary %>% filter(numberPeriod == 1)
shot_summary_2 <- as.data.frame(shot_summary %>% group_by(zoneBasic) %>% summarize(makes = sum(makes),attemps = sum(attempts)) %>% mutate(fg = makes/attemps) %>%select(zoneBasic,fg) %>% pivot_wider(names_from = zoneBasic, values_from = fg)) %>% replace(is.na(.),0)
shot_summary_2
shot_summary
player
player_q1
shot_summary
shot_summary
player <- team %>% filter(idPlayer == player_id[1], numberPeriod <= 4) %>%
mutate(x = as.numeric(as.character(locationX)) / 10, y = as.numeric(as.character(locationY)) / 10 + hoop_center_y)
shot_summary <- player %>% select(zoneBasic,nameZone,slugZone,distanceShot,isShotAttempted,isShotMade,typeAction,typeShot,namePlayer,numberPeriod) %>% group_by(zoneBasic,numberPeriod,namePlayer) %>% summarize(attempts = n(),makes = sum(isShotMade,na.rm = TRUE)) %>% mutate(misses = attempts - makes,fg = makes/attempts)
shot_summary <- join %>% left_join(shot_summary, by = c("zoneBasic","numberPeriod")) %>% select(-namePlayer) %>% replace(is.na(.),0)
shot_summary
player_q1 <- player %>% filter(numberPeriod == 1)
shot_summary <- shot_summary %>% filter(numberPeriod == 1)
shot_summary
shot_summary_2 <- as.data.frame(shot_summary %>% group_by(zoneBasic) %>% summarize(makes = sum(makes),attemps = sum(attempts)) %>% mutate(fg = makes/attemps) %>%select(zoneBasic,fg) %>% pivot_wider(names_from = zoneBasic, values_from = fg)) %>% replace(is.na(.),0)
shot_summary_2
shot_summary_2 <- rbind(rep(1,ncol(shot_summary_2)),rep(0,ncol(shot_summary_2)),shot_summary_2)
shot_summary_2
for (i in players) {
rmarkdown::render(input = 'C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/ML_Parlay_TBRv9_2025.Rmd',
output_file = paste0(i,".html"),
output_dir = file.path('C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/sheets'),
params = list(player = i))
}
player <- team %>% filter(idPlayer == player_id[1], numberPeriod <= 4) %>%
mutate(x = as.numeric(as.character(locationX)) / 10, y = as.numeric(as.character(locationY)) / 10 + hoop_center_y)
shot_summary <- player %>% select(zoneBasic,nameZone,slugZone,distanceShot,isShotAttempted,isShotMade,typeAction,typeShot,namePlayer,numberPeriod) %>% group_by(zoneBasic,numberPeriod,namePlayer) %>% summarize(attempts = n(),makes = sum(isShotMade,na.rm = TRUE)) %>% mutate(misses = attempts - makes,fg = makes/attempts)
shot_summary <- join %>% left_join(shot_summary, by = c("zoneBasic","numberPeriod")) %>% select(-namePlayer) %>% replace(is.na(.),0)
shot_summary
shot_summary <- shot_summary %>% filter(numberPeriod == 2)
shot_summary
shot_summary_2 <- as.data.frame(shot_summary %>% group_by(zoneBasic) %>% summarize(makes = sum(makes),attemps = sum(attempts)) %>% mutate(fg = makes/attemps) %>%select(zoneBasic,fg) %>% pivot_wider(names_from = zoneBasic, values_from = fg))%>% replace(is.na(.),0)
shot_summary_2
shot_summary_2 <- rbind(rep(1,ncol(shot_summary_2)),rep(0,ncol(shot_summary_2)),shot_summary_2)
shot_summary_2
radarchart(shot_summary_2, axis = 1, pcol = rgb(0.2,0.5,0.5,0.9), pfcol = rgb(0,0.5,0.5,0.5) , plwd=4,cglcol="grey", cglty=1, axislabcol="grey", cglwd=1.2,vlcex=1, title = paste(params$player,"FG% Distribution Regular Season Q2 Excludes OT"))
team
player
for (i in players) {
rmarkdown::render(input = 'C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/ML_Parlay_TBRv9_2025.Rmd',
output_file = paste0(i,".html"),
output_dir = file.path('C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/sheets'),
params = list(player = i))
}
player
shot_summary <- player %>% select(zoneBasic,nameZone,slugZone,distanceShot,isShotAttempted,isShotMade,typeAction,typeShot,namePlayer,numberPeriod) %>% group_by(zoneBasic,numberPeriod,namePlayer) %>% summarize(attempts = n(),makes = sum(isShotMade,na.rm = TRUE)) %>% mutate(misses = attempts - makes,fg = makes/attempts)
shot_summary <- join %>% left_join(shot_summary, by = c("zoneBasic","numberPeriod")) %>% select(-namePlayer) %>% replace(is.na(.),0)
shot_summary_2 <- as.data.frame(shot_summary %>% group_by(zoneBasic) %>% summarize(makes = sum(makes),attemps = sum(attempts)) %>% mutate(fg = makes/attemps) %>%select(zoneBasic,fg) %>% pivot_wider(names_from = zoneBasic, values_from = fg)) %>% replace(is.na(.),0)
player_q1 <- player %>% filter(numberPeriod == 1)
shot_summary <- shot_summary %>% filter(numberPeriod == 1)
shot_summary_2 <- as.data.frame(shot_summary %>% group_by(zoneBasic) %>% summarize(makes = sum(makes),attemps = sum(attempts)) %>% mutate(fg = makes/attemps) %>%select(zoneBasic,fg) %>% pivot_wider(names_from = zoneBasic, values_from = fg)) %>% replace(is.na(.),0)
shot_summary_2 <- rbind(rep(1,ncol(shot_summary_2)),rep(0,ncol(shot_summary_2)),shot_summary_2)
radarchart(shot_summary_2, axis = 1, pcol = rgb(0.2,0.5,0.5,0.9), pfcol = rgb(0,0.5,0.5,0.5) , plwd=4,cglcol="grey", cglty=1, axislabcol="grey", cglwd=1.2,vlcex=1, title = paste(params$player,"FG% Distribution Regular Season Q1 Excludes OT"))
radarchart(shot_summary_2, axis = 1, pcol = rgb(0.2,0.5,0.5,0.9), pfcol = rgb(0,0.5,0.5,0.5) , plwd=4,cglcol="grey", cglty=1, axislabcol="grey", cglwd=1.2,vlcex=1, title = paste(params$player,"FG% Distribution Regular Season Q1 Excludes OT"))
shot_summary_2
player_q2 <- player %>% filter(numberPeriod == 2)
shot_summary <- shot_summary %>% filter(numberPeriod == 2)
shot_summary_2 <- as.data.frame(shot_summary %>% group_by(zoneBasic) %>% summarize(makes = sum(makes),attemps = sum(attempts)) %>% mutate(fg = makes/attemps) %>%select(zoneBasic,fg) %>% pivot_wider(names_from = zoneBasic, values_from = fg))%>% replace(is.na(.),0)
shot_summary_2 <- rbind(rep(1,ncol(shot_summary_2)),rep(0,ncol(shot_summary_2)),shot_summary_2)
radarchart(shot_summary_2, axis = 1, pcol = rgb(0.2,0.5,0.5,0.9), pfcol = rgb(0,0.5,0.5,0.5) , plwd=4,cglcol="grey", cglty=1, axislabcol="grey", cglwd=1.2,vlcex=1, title = paste(params$player,"FG% Distribution Regular Season Q2 Excludes OT"))
shot_summary
for (i in players) {
rmarkdown::render(input = 'C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/ML_Parlay_TBRv9_2025.Rmd',
output_file = paste0(i,".html"),
output_dir = file.path('C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/sheets'),
params = list(player = i))
}
schedule
next_game_date_teams
schedule
next_game_date_teams
Sys.Date()
schedule
schedule %>% filter(slugTeam == "GSW")
schedule %>% group_by(slugTeam) %>% summarize(n = n())
print(schedule %>% group_by(slugTeam) %>% summarize(n = n()))
print(schedule %>% group_by(slugTeam) %>% summarize(n = n()),30)
print(schedule %>% group_by(slugTeam) %>% summarize(n = n()),n =30)
slugteams_list
teams %>% select(slugTeam)
nba_teams(league = "NBA")
teams %>% filter(slugTeam == "GSW")
teams %>% filter(slugTeam == "LAL")
#teams Patch
teams <- game_logs(seasons = 2024, result_types = "team", season_types = c("Regular Season"))
team_list <- teams %>% group_by(slugTeam) %>% summarize(n = n()) %>% pull(slugTeam)
team_list
slugteams
team_list <- teams %>% group_by(slugTeam) %>% summarize(n = n()) %>% select(slugTeam)
team_list
#teams Patch
teams <- game_logs(seasons = 2024, result_types = "team", season_types = c("Regular Season"))
team_list <- teams %>% group_by(slugTeam) %>% summarize(n = n()) %>% select(slugTeam)
slugteams <- teams %>% select(slugTeam)
slugteams_list <- team_list %>% mutate(slugTeam = tolower(slugTeam)) %>%
mutate(slugTeam = ifelse(slugTeam == "uta","utah",
ifelse(slugTeam == "nop","no",slugTeam))) %>% pull(slugTeam)
schedule <- lapply(slugteams_list, function(x){
testurl <- paste0("https://www.espn.com/nba/team/schedule/_/name/",x,"/seasontype/2")
h <- read_html(testurl)
tab <- h |> html_nodes("table")
tab <- tab[[1]] |> html_table()
tab <- tab |> setNames(c("Date", "Opponenet", "Time", "TV","Tickets","Tickets_dup","Unused1","Unused2"))
tab <- tab[-(1:2),]
tab <- tab %>% mutate(location = ifelse(str_detect(Opponenet,"@"),"Away","Home")) %>%
mutate(Opponent = ifelse(location == "Home", str_sub(Opponenet,3),str_sub(Opponenet,2))) %>%
mutate(Date = str_extract(Date, '\\b[^,]+$')) %>% mutate(Date = as.Date(Date, "%b%d")) %>% select(Date,location,Opponent)
tab <- tab %>% left_join(teams, by = "Opponent") %>% mutate(Team = toupper(x)) %>%
mutate(Team = ifelse(Team == "UTAH","UTA",ifelse(Team == "NO","NOP",Team))) %>% mutate(next_game = ifelse(Date >= Sys.Date(),TRUE,FALSE)) %>%
mutate(game_number = 1:n())
})
slugteams_list
schedule <- lapply(slugteams_list, function(x){
testurl <- paste0("https://www.espn.com/nba/team/schedule/_/name/",x,"/seasontype/2")
h <- read_html(testurl)
tab <- h |> html_nodes("table")
tab <- tab[[1]] |> html_table()
tab <- tab |> setNames(c("Date", "Opponenet", "Time", "TV","Tickets","Tickets_dup","Unused1","Unused2"))
tab <- tab[-(1:2),]
tab <- tab %>% mutate(location = ifelse(str_detect(Opponenet,"@"),"Away","Home")) %>%
mutate(Opponent = ifelse(location == "Home", str_sub(Opponenet,3),str_sub(Opponenet,2))) %>%
mutate(Date = str_extract(Date, '\\b[^,]+$')) %>% mutate(Date = as.Date(Date, "%b%d")) %>% select(Date,location,Opponent)
tab <- tab %>% left_join(teams, by = "Opponent") %>% mutate(Team = toupper(x)) %>%
mutate(Team = ifelse(Team == "UTAH","UTA",ifelse(Team == "NO","NOP",Team))) %>% mutate(next_game = ifelse(Date >= Sys.Date(),TRUE,FALSE)) %>%
mutate(game_number = 1:n())
})
library(tidyverse)
library(nbastatR)
library(dplyr)
library(flexdashboard)
library(parallel)
library(rvest)
rosters <- read.csv("rosters.csv")
rosters_id <- rosters %>% filter(Include == "Y") %>% pull(idPlayer)
rosters_names <- rosters %>% filter(Include == "Y") %>% pull(namePlayer)
rosters_teams <- rosters %>% filter(Include == "Y") %>% pull(idTeam)
Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2)
all_rosters <- seasons_rosters(seasons = 2025, return_message = FALSE)
playerdata <- game_logs(seasons = 2025, result_types = "player", season_types = c("Regular Season"))
player_name <- function(x){
playerdata %>% filter(idPlayer == x) %>%
select(dateGame, idGame, slugOpponent, idPlayer, namePlayer, fgm,fga,pts,treb,ast,stl,blk,fg3m,fg3a,tov,
plusminus,minutes,locationGame, countDaysRestPlayer, isB2B, isB2BFirst, isB2BSecond) %>% group_by(namePlayer) %>% summarize(n = n()) %>% pull(namePlayer)
}
player_name <- lapply(rosters_id,player_name)
players <- player_name
players <- unlist(players)
gameids<- playerdata %>% group_by(idGame) %>% summarize(n = n()) %>% pull(idGame)
numcores <- parallelly::availableCores()
cl <- makeCluster(numcores)
my_function <- function(x) {
library(tidyverse)
library(nbastatR)
play_play <- play_by_play_v2(game_ids = x,nest_data = F)
}
results <- parLapply(cl,gameids,my_function)
play_play <- bind_rows(results)
stopCluster(cl)
#Schedule
teams <- nba_teams(league = "NBA")
teams <- teams %>% filter(isNonNBATeam == 0, idConference != 0) %>% select(cityTeam, slugTeam, idTeam, nameTeam, urlThumbnailTeam) %>% rename(Opponent = cityTeam)
#teams Patch
teams <- game_logs(seasons = 2024, result_types = "team", season_types = c("Regular Season"))
team_list <- teams %>% group_by(slugTeam) %>% summarize(n = n()) %>% select(slugTeam)
slugteams <- teams %>% select(slugTeam)
slugteams_list <- team_list %>% mutate(slugTeam = tolower(slugTeam)) %>%
mutate(slugTeam = ifelse(slugTeam == "uta","utah",
ifelse(slugTeam == "nop","no",slugTeam))) %>% pull(slugTeam)
schedule <- lapply(slugteams_list, function(x){
testurl <- paste0("https://www.espn.com/nba/team/schedule/_/name/",x,"/seasontype/2")
h <- read_html(testurl)
tab <- h |> html_nodes("table")
tab <- tab[[1]] |> html_table()
tab <- tab |> setNames(c("Date", "Opponenet", "Time", "TV","Tickets","Tickets_dup","Unused1","Unused2"))
tab <- tab[-(1:2),]
tab <- tab %>% mutate(location = ifelse(str_detect(Opponenet,"@"),"Away","Home")) %>%
mutate(Opponent = ifelse(location == "Home", str_sub(Opponenet,3),str_sub(Opponenet,2))) %>%
mutate(Date = str_extract(Date, '\\b[^,]+$')) %>% mutate(Date = as.Date(Date, "%b%d")) %>% select(Date,location,Opponent)
tab <- tab %>% left_join(teams, by = "Opponent") %>% mutate(Team = toupper(x)) %>%
mutate(Team = ifelse(Team == "UTAH","UTA",ifelse(Team == "NO","NOP",Team))) %>% mutate(next_game = ifelse(Date >= Sys.Date(),TRUE,FALSE)) %>%
mutate(game_number = 1:n())
})
slugteams_list
teams
teams <- nba_teams(league = "NBA")
teams <- teams %>% filter(isNonNBATeam == 0, idConference != 0) %>% select(cityTeam, slugTeam, idTeam, nameTeam, urlThumbnailTeam) %>% rename(Opponent = cityTeam)
teams
nba_teams(league = "NBA")
test <- nba_teams(league = "NBA")
test %>% filter(slugTeam == "GSW")
test
test %>% filter(slugTeam == "LAL")
test %>% filter(slugTeam == "GSW")
teams <- nba_teams(league = "NBA")
teams <- teams %>% filter(idLeague == 2, idConference != 0) %>% select(cityTeam, slugTeam, idTeam, nameTeam, urlThumbnailTeam) %>% rename(Opponent = cityTeam)
teams
slugteams <- teams %>% select(slugTeam)
slugteams_list <- slugteams %>% mutate(slugTeam = tolower(slugTeam)) %>%
mutate(slugTeam = ifelse(slugTeam == "uta","utah",
ifelse(slugTeam == "nop","no",slugTeam))) %>% pull(slugTeam)
slugteams_list
schedule <- lapply(slugteams_list, function(x){
testurl <- paste0("https://www.espn.com/nba/team/schedule/_/name/",x,"/seasontype/2")
h <- read_html(testurl)
tab <- h |> html_nodes("table")
tab <- tab[[1]] |> html_table()
tab <- tab |> setNames(c("Date", "Opponenet", "Time", "TV","Tickets","Tickets_dup","Unused1","Unused2"))
tab <- tab[-(1:2),]
tab <- tab %>% mutate(location = ifelse(str_detect(Opponenet,"@"),"Away","Home")) %>%
mutate(Opponent = ifelse(location == "Home", str_sub(Opponenet,3),str_sub(Opponenet,2))) %>%
mutate(Date = str_extract(Date, '\\b[^,]+$')) %>% mutate(Date = as.Date(Date, "%b%d")) %>% select(Date,location,Opponent)
tab <- tab %>% left_join(teams, by = "Opponent") %>% mutate(Team = toupper(x)) %>%
mutate(Team = ifelse(Team == "UTAH","UTA",ifelse(Team == "NO","NOP",Team))) %>% mutate(next_game = ifelse(Date >= Sys.Date(),TRUE,FALSE)) %>%
mutate(game_number = 1:n())
})
schedule <- bind_rows(schedule)
next_game_date_teams <- schedule %>% filter(Date == schedule %>% filter(next_game == TRUE) %>% pull(Date) %>% min) %>% pull(slugTeam)
next_team_batch <- lapply(next_game_date_teams, function(x){
rosters %>% filter(slugTeam == x) %>% filter(Include == "Y") %>% select(idPlayer,namePlayer)
})
next_team_batch <- bind_rows(next_team_batch) %>% pull(namePlayer)
next_team_batch
next_game_date_teams
schedule
schedule %>% filter(slugTeam == "BOS")
schedule %>% filter(slugTeam == "BOS") %>% arrange(game_number)
x = "bos"
testurl <- paste0("https://www.espn.com/nba/team/schedule/_/name/",x,"/seasontype/2")
h <- read_html(testurl)
tab <- h |> html_nodes("table")
tab <- tab[[1]] |> html_table()
tab <- tab |> setNames(c("Date", "Opponenet", "Time", "TV","Tickets","Tickets_dup","Unused1","Unused2"))
tab
tab <- tab[-(1:2),]
tab
tab <- tab %>% mutate(location = ifelse(str_detect(Opponenet,"@"),"Away","Home")) %>%
mutate(Opponent = ifelse(location == "Home", str_sub(Opponenet,3),str_sub(Opponenet,2))) %>%
mutate(Date = str_extract(Date, '\\b[^,]+$')) %>% mutate(Date = as.Date(Date, "%b%d")) %>% select(Date,location,Opponent)
tab
tab <- tab %>% left_join(teams, by = "Opponent") %>% mutate(Team = toupper(x)) %>%
mutate(Team = ifelse(Team == "UTAH","UTA",ifelse(Team == "NO","NOP",Team))) %>% mutate(next_game = ifelse(Date >= Sys.Date(),TRUE,FALSE)) %>%
mutate(game_number = 1:n())
tab
testurl <- paste0("https://www.espn.com/nba/team/schedule/_/name/",x,"/seasontype/2")
h <- read_html(testurl)
tab <- h |> html_nodes("table")
tab <- tab[[1]] |> html_table()
tab <- tab |> setNames(c("Date", "Opponenet", "Time", "TV","Tickets","Tickets_dup","Unused1","Unused2"))
tab <- tab[-(1:2),]
tab
tab <- tab %>% mutate(location = ifelse(str_detect(Opponenet,"@"),"Away","Home")) %>%
mutate(Opponent = ifelse(location == "Home", str_sub(Opponenet,3),str_sub(Opponenet,2))) %>%
mutate(Date = str_extract(Date, '\\b[^,]+$')) %>% mutate(Date = as.Date(Date, "%b%d")) %>% select(Date,location,Opponent)
tab
tab <- tab %>% left_join(teams, by = "Opponent") %>% mutate(Team = toupper(x)) %>%
mutate(Team = ifelse(Team == "UTAH","UTA",ifelse(Team == "NO","NOP",Team))) %>% mutate(next_game = ifelse(Date >= Sys.Date(),TRUE,FALSE)) %>%
mutate(game_number = 1:n())
tab
install.packages("git2r")
library(git2r)
gitstatus()
git2r::config(user.name = "backironanalytics",user.email = "backironanalytics@gmail.com")
gitstatus()
gitadd()
