})
previous_team_batch <- bind_rows(previous_team_batch)
previous_team_batch <- previous_team_batch %>% left_join(playerdata %>% filter(slugSeason == "2024-25") %>% group_by(idPlayer) %>% summarize(n = n()) %>% ungroup(), by = "idPlayer") %>% filter(n >=1)
previous_team_batch <- previous_team_batch %>% pull(namePlayer)
wix_jobs <- write.csv(as.data.frame(players) %>% rename(namePlayer = players) %>% left_join(playerdata %>% filter(slugSeason == "2024-25") %>% group_by(namePlayer,slugTeam) %>% summarize(n = n()), by = "namePlayer") %>% select(namePlayer,slugTeam) %>% left_join(teams, by = "slugTeam") %>% select(namePlayer, nameTeam) %>% mutate(HTML = paste0("{\"nodes\":[{\"type\":\"PARAGRAPH\",\"id\":\"hlkd5116\",\"nodes\":[],\"paragraphData\":{}},{\"type\":\"HTML\",\"id\":\"cps99115\",\"nodes\":[],\"htmlData\":{\"containerData\":{\"textWrap\":true,\"height\":{\"custom\":\"1000\"},\"spoiler\":{},\"alignment\":\"CENTER\",\"width\":{\"custom\":\"1800\"}},\"url\":\"https://raw.githack.com/backironanalytics/my-site-test/main/sheets/",gsub("^(.*?)\\s.*", "\\1",namePlayer),"%20",gsub("^\\S+ ", "",namePlayer),".html\",\"source\":\"HTML\"}},{\"type\":\"PARAGRAPH\",\"id\":\"zuhhp117\",\"nodes\":[],\"paragraphData\":{}}],\"metadata\":{\"version\":1,\"createdTimestamp\":\"2022-12-19T17:56:18.279Z\",\"updatedTimestamp\":\"2022-12-19T17:56:18.279Z\",\"id\":\"857a69b7-4e6b-4821-973a-064010acd74b\"},\"documentStyle\":{}}")),"jobs_test2.csv")
for (i in next_team_batch) {
rmarkdown::render(input = 'C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/ML_Parlay_TBRv10_2025.Rmd',
output_file = paste0(i,".html"),
output_dir = file.path('C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/sheets'),
params = list(player = i))
}
next_opponent_table
library(tidyverse)
library(nbastatR)
library(dplyr)
library(flexdashboard)
library(parallel)
library(rvest)
rosters <- read.csv("rosters.csv")
rosters_id <- rosters %>% filter(Include == "Y") %>% pull(idPlayer)
rosters_names <- rosters %>% filter(Include == "Y") %>% pull(namePlayer)
rosters_teams <- rosters %>% filter(Include == "Y") %>% pull(idTeam)
Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2)
all_rosters <- seasons_rosters(seasons = 2025, return_message = FALSE)
playerdata <- game_logs(seasons = 2024:2025, result_types = "player", season_types = c("Regular Season"))
playerdata_playoffs <- game_logs(seasons = 2024, result_types = "player", season_types = c("Playoffs"))
playerdata <- bind_rows(playerdata, playerdata_playoffs)
player_name <- function(x){
playerdata %>% filter(idPlayer == x) %>%
select(dateGame, idGame, slugOpponent, idPlayer, namePlayer, fgm,fga,pts,treb,ast,stl,blk,fg3m,fg3a,tov,
plusminus,minutes,locationGame, countDaysRestPlayer, isB2B, isB2BFirst, isB2BSecond) %>% group_by(namePlayer) %>% summarize(n = n()) %>% pull(namePlayer)
}
player_name <- lapply(rosters_id,player_name)
players <- player_name
players <- unlist(players)
gameids<- playerdata %>% group_by(idGame) %>% summarize(n = n()) %>% pull(idGame)
numcores <- parallelly::availableCores()
cl <- makeCluster(numcores)
my_function <- function(x) {
library(tidyverse)
library(nbastatR)
play_play <- play_by_play_v2(game_ids = x,nest_data = F)
}
results <- parLapply(cl,gameids,my_function)
play_play <- bind_rows(results)
stopCluster(cl)
#Schedule
teams <- nba_teams(league = "NBA")
teams <- teams %>% filter(idLeague == 2, idConference != 0) %>% select(cityTeam, slugTeam, idTeam, nameTeam, urlThumbnailTeam) %>% rename(Opponent = cityTeam)
slugteams <- teams %>% select(slugTeam)
slugteams_list <- slugteams %>% mutate(slugTeam = tolower(slugTeam)) %>%
mutate(slugTeam = ifelse(slugTeam == "uta","utah",
ifelse(slugTeam == "nop","no",slugTeam))) %>% pull(slugTeam)
schedule <- lapply(slugteams_list, function(x){
testurl <- paste0("https://www.espn.com/nba/team/schedule/_/name/",x,"/seasontype/2")
h <- read_html(testurl)
tab <- h |> html_nodes("table")
tab <- tab[[1]] |> html_table()
tab <- tab |> setNames(c("Date", "Opponenet", "Time", "TV","Tickets","Tickets_dup","Unused1","Unused2"))
tab <- tab[-(1:2),]
tab <- tab %>% mutate(location = ifelse(str_detect(Opponenet,"@"),"Away","Home")) %>%
mutate(Opponent = ifelse(location == "Home", str_sub(Opponenet,3),str_sub(Opponenet,2))) %>%
mutate(Date = str_extract(Date, '\\b[^,]+$')) %>% mutate(Date = as.Date(Date, "%b%d")) %>% select(Date,location,Opponent)
tab <- tab %>% left_join(teams, by = "Opponent") %>% mutate(Team = toupper(x)) %>%
mutate(Team = ifelse(Team == "UTAH","UTA",ifelse(Team == "NO","NOP",Team))) %>% mutate(next_game = ifelse(Date >= Sys.Date(),TRUE,FALSE)) %>%
mutate(game_number = 1:n())
})
schedule <- bind_rows(schedule)
schedule <- schedule %>% filter(!is.na(Date))
#Next Game
next_game_date_teams <- schedule %>% filter(Date == schedule %>% filter(next_game == TRUE) %>% pull(Date) %>% min) %>% pull(slugTeam)
next_team_batch <- lapply(next_game_date_teams, function(x){
rosters %>% filter(slugTeam == x) %>% filter(Include == "Y") %>% select(idPlayer,namePlayer)
})
next_team_batch <- bind_rows(next_team_batch)
next_team_batch <- next_team_batch %>% left_join(playerdata %>% filter(slugSeason == "2024-25") %>% group_by(idPlayer) %>% summarize(n = n()) %>% ungroup(), by = "idPlayer") %>% filter(n >=1)
next_team_batch <- next_team_batch %>% pull(namePlayer)
#Previous Game
previous_game_date_teams <- schedule %>% filter(Date == schedule %>% filter(next_game == TRUE) %>% pull(Date) %>% min +1) %>% pull(slugTeam)
previous_team_batch <- lapply(previous_game_date_teams, function(x){
rosters %>% filter(slugTeam == x) %>% filter(Include == "Y") %>% select(idPlayer,namePlayer)
})
previous_team_batch <- bind_rows(previous_team_batch)
previous_team_batch <- previous_team_batch %>% left_join(playerdata %>% filter(slugSeason == "2024-25") %>% group_by(idPlayer) %>% summarize(n = n()) %>% ungroup(), by = "idPlayer") %>% filter(n >=1)
previous_team_batch <- previous_team_batch %>% pull(namePlayer)
wix_jobs <- write.csv(as.data.frame(players) %>% rename(namePlayer = players) %>% left_join(playerdata %>% filter(slugSeason == "2024-25") %>% group_by(namePlayer,slugTeam) %>% summarize(n = n()), by = "namePlayer") %>% select(namePlayer,slugTeam) %>% left_join(teams, by = "slugTeam") %>% select(namePlayer, nameTeam) %>% mutate(HTML = paste0("{\"nodes\":[{\"type\":\"PARAGRAPH\",\"id\":\"hlkd5116\",\"nodes\":[],\"paragraphData\":{}},{\"type\":\"HTML\",\"id\":\"cps99115\",\"nodes\":[],\"htmlData\":{\"containerData\":{\"textWrap\":true,\"height\":{\"custom\":\"1000\"},\"spoiler\":{},\"alignment\":\"CENTER\",\"width\":{\"custom\":\"1800\"}},\"url\":\"https://raw.githack.com/backironanalytics/my-site-test/main/sheets/",gsub("^(.*?)\\s.*", "\\1",namePlayer),"%20",gsub("^\\S+ ", "",namePlayer),".html\",\"source\":\"HTML\"}},{\"type\":\"PARAGRAPH\",\"id\":\"zuhhp117\",\"nodes\":[],\"paragraphData\":{}}],\"metadata\":{\"version\":1,\"createdTimestamp\":\"2022-12-19T17:56:18.279Z\",\"updatedTimestamp\":\"2022-12-19T17:56:18.279Z\",\"id\":\"857a69b7-4e6b-4821-973a-064010acd74b\"},\"documentStyle\":{}}")),"jobs_test2.csv")
for (i in next_team_batch) {
rmarkdown::render(input = 'C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/ML_Parlay_TBRv10_2025.Rmd',
output_file = paste0(i,".html"),
output_dir = file.path('C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/sheets'),
params = list(player = i))
}
quarterly_steals
quarterly_steals %>% left_join(quarterly_blocks, by = c("idPlayer","slugTeam","numberPeriod","typeSeason","slugSeason"))
play_play_player_assists
quarterly_steals %>% left_join(quarterly_blocks, by = c("idPlayer","slugTeam","numberPeriod","typeSeason","slugSeason"))
quarterly_steals %>% left_join(quarterly_blocks, by = c("idPlayer","slugTeam","numberPeriod","typeSeason","slugSeason")) %>% select(namePlayer2,idPlayer,slugTeam,numberPeriod,typeSeason,slugSeason,steals,blocks,n.x)
quarterly_stlblk <- quarterly_steals %>% left_join(quarterly_blocks, by = c("idPlayer","slugTeam","numberPeriod","typeSeason","slugSeason")) %>% select(namePlayer2,idPlayer,slugTeam,numberPeriod,typeSeason,slugSeason,steals,blocks,n.x)
quarterly_stlblk <- replace(quarterly_stlblk, is.na(quarterly_stlblk),0)
quarterly_stlblkpg <- quarterly_stlblk %>% group_by(namePlayer2,idPlayer,numberPeriod,typeSeason,slugSeason) %>% summarize(blk = sum(blocks), n = sum(n.x), stl = sum(steals))  %>% mutate(stlblkpg = (stl+blk)/n) %>% filter(typeSeason == "Regular Season", numberPeriod <= 4, slugSeason == current_season) %>% select(numberPeriod,stlblkpg)
quarterly_stlblkpg
quarterly_stlblk
first <- quarterly_stlblk %>% group_by(namePlayer2,idPlayer,numberPeriod,typeSeason,slugSeason) %>% summarize(blk = sum(blocks), n = sum(n.x), stl = sum(steals))  %>% mutate(stlblkpg = (stl+blk)/n) %>% filter(typeSeason == "Regular Season", numberPeriod == 1, slugSeason == current_season) %>% pull(stlblkpg)
zero <- 0
first <- if(length(first) ==0){0}else{first}
stlblk_prob <- seq(from = round(first,0)+1, to = 10, by = 1)
first
games_firstqstl
games_firstqblocks
first <- quarterly_stlblk %>% group_by(namePlayer2,idPlayer,numberPeriod,typeSeason,slugSeason) %>% summarize(blk = sum(blocks), n = sum(n.x), stl = sum(steals))  %>% mutate(stlblkpg = (stl+blk)/n) %>% filter(typeSeason == "Regular Season", numberPeriod == 1, slugSeason == current_season) %>% pull(stlblkpg)
zero <- 0
first <- if(length(first) ==0){0}else{first}
stlblk_prob <- seq(from = round(first,0)+1, to = 10, by = 1)
games <- games_firstqstl %>% full_join(games_firstqblocks, by = c("idGame","dateGame","Type"))
games <- replace(games,is.na(games),0)
games <- games %>% mutate(firstq_stlblk = firstq_stl + firstq_blocks) %>% select(idGame,dateGame,firstq_stlblk,Type)
firstqstl
games_firstqstl
games <- games_firstqstl %>% full_join(games_firstqblocks, by = c("idGame","dateGame","Type"))
games <- replace(games,is.na(games),0)
games <- games %>% mutate(firstq_stlblk = firstq_steals + firstq_blocks) %>% select(idGame,dateGame,firstq_stlblk,Type)
games
all_firstqstl
all_firstqstl %>% full_join(all_firstblocks, by = c("idGame","dateGame","Type"))%>% mutate(stlblk = replace_na(steals,0) + replace_na(blocks,0)) %>% select(idGame,dateGame,stlblk,Type)
all_firstqblocks
all <- all_firstqstl %>% full_join(all_firstqblocks, by = c("idGame","dateGame","Type"))%>% mutate(stlblk = replace_na(steals,0) + replace_na(blocks,0)) %>% select(idGame,dateGame,stlblk,Type)
all
error <- all %>% mutate(stlblk = stlblk*0, Type = "First Quarter") %>% rename(firstq_stlblk = stlblk)
games <- if(nrow(games)==0){error}else{games}
games
combined <- games %>% left_join(all, by = "idGame")
bind <- bind_rows(games %>% rename(stlblk = firstq_stlblk),all %>% semi_join(games, by = "idGame"))
for (i in next_team_batch) {
rmarkdown::render(input = 'C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/ML_Parlay_TBRv10_2025.Rmd',
output_file = paste0(i,".html"),
output_dir = file.path('C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/sheets'),
params = list(player = i))
}
for (i in next_team_batch) {
rmarkdown::render(input = 'C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/ML_Parlay_TBRv10_2025.Rmd',
output_file = paste0(i,".html"),
output_dir = file.path('C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/sheets'),
params = list(player = i))
}
library(tidyverse)
library(nbastatR)
library(dplyr)
library(flexdashboard)
library(parallel)
library(rvest)
rosters <- read.csv("rosters.csv")
rosters_id <- rosters %>% filter(Include == "Y") %>% pull(idPlayer)
rosters_names <- rosters %>% filter(Include == "Y") %>% pull(namePlayer)
rosters_teams <- rosters %>% filter(Include == "Y") %>% pull(idTeam)
Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2)
all_rosters <- seasons_rosters(seasons = 2025, return_message = FALSE)
playerdata <- game_logs(seasons = 2024:2025, result_types = "player", season_types = c("Regular Season"))
playerdata_playoffs <- game_logs(seasons = 2024, result_types = "player", season_types = c("Playoffs"))
playerdata <- bind_rows(playerdata, playerdata_playoffs)
player_name <- function(x){
playerdata %>% filter(idPlayer == x) %>%
select(dateGame, idGame, slugOpponent, idPlayer, namePlayer, fgm,fga,pts,treb,ast,stl,blk,fg3m,fg3a,tov,
plusminus,minutes,locationGame, countDaysRestPlayer, isB2B, isB2BFirst, isB2BSecond) %>% group_by(namePlayer) %>% summarize(n = n()) %>% pull(namePlayer)
}
player_name <- lapply(rosters_id,player_name)
players <- player_name
players <- unlist(players)
gameids<- playerdata %>% group_by(idGame) %>% summarize(n = n()) %>% pull(idGame)
numcores <- parallelly::availableCores()
cl <- makeCluster(numcores)
my_function <- function(x) {
library(tidyverse)
library(nbastatR)
play_play <- play_by_play_v2(game_ids = x,nest_data = F)
}
results <- parLapply(cl,gameids,my_function)
play_play <- bind_rows(results)
stopCluster(cl)
#Schedule
teams <- nba_teams(league = "NBA")
teams <- teams %>% filter(idLeague == 2, idConference != 0) %>% select(cityTeam, slugTeam, idTeam, nameTeam, urlThumbnailTeam) %>% rename(Opponent = cityTeam)
slugteams <- teams %>% select(slugTeam)
slugteams_list <- slugteams %>% mutate(slugTeam = tolower(slugTeam)) %>%
mutate(slugTeam = ifelse(slugTeam == "uta","utah",
ifelse(slugTeam == "nop","no",slugTeam))) %>% pull(slugTeam)
schedule <- lapply(slugteams_list, function(x){
testurl <- paste0("https://www.espn.com/nba/team/schedule/_/name/",x,"/seasontype/2")
h <- read_html(testurl)
tab <- h |> html_nodes("table")
tab <- tab[[1]] |> html_table()
tab <- tab |> setNames(c("Date", "Opponenet", "Time", "TV","Tickets","Tickets_dup","Unused1","Unused2"))
tab <- tab[-(1:2),]
tab <- tab %>% mutate(location = ifelse(str_detect(Opponenet,"@"),"Away","Home")) %>%
mutate(Opponent = ifelse(location == "Home", str_sub(Opponenet,3),str_sub(Opponenet,2))) %>%
mutate(Date = str_extract(Date, '\\b[^,]+$')) %>% mutate(Date = as.Date(Date, "%b%d")) %>% select(Date,location,Opponent)
tab <- tab %>% left_join(teams, by = "Opponent") %>% mutate(Team = toupper(x)) %>%
mutate(Team = ifelse(Team == "UTAH","UTA",ifelse(Team == "NO","NOP",Team))) %>% mutate(next_game = ifelse(Date >= Sys.Date(),TRUE,FALSE)) %>%
mutate(game_number = 1:n())
})
schedule <- bind_rows(schedule)
schedule <- schedule %>% filter(!is.na(Date))
#Next Game
next_game_date_teams <- schedule %>% filter(Date == schedule %>% filter(next_game == TRUE) %>% pull(Date) %>% min) %>% pull(slugTeam)
next_team_batch <- lapply(next_game_date_teams, function(x){
rosters %>% filter(slugTeam == x) %>% filter(Include == "Y") %>% select(idPlayer,namePlayer)
})
next_team_batch <- bind_rows(next_team_batch)
next_team_batch <- next_team_batch %>% left_join(playerdata %>% filter(slugSeason == "2024-25") %>% group_by(idPlayer) %>% summarize(n = n()) %>% ungroup(), by = "idPlayer") %>% filter(n >=1)
next_team_batch <- next_team_batch %>% pull(namePlayer)
#Previous Game
previous_game_date_teams <- schedule %>% filter(Date == schedule %>% filter(next_game == TRUE) %>% pull(Date) %>% min +1) %>% pull(slugTeam)
previous_team_batch <- lapply(previous_game_date_teams, function(x){
rosters %>% filter(slugTeam == x) %>% filter(Include == "Y") %>% select(idPlayer,namePlayer)
})
previous_team_batch <- bind_rows(previous_team_batch)
previous_team_batch <- previous_team_batch %>% left_join(playerdata %>% filter(slugSeason == "2024-25") %>% group_by(idPlayer) %>% summarize(n = n()) %>% ungroup(), by = "idPlayer") %>% filter(n >=1)
previous_team_batch <- previous_team_batch %>% pull(namePlayer)
wix_jobs <- write.csv(as.data.frame(players) %>% rename(namePlayer = players) %>% left_join(playerdata %>% filter(slugSeason == "2024-25") %>% group_by(namePlayer,slugTeam) %>% summarize(n = n()), by = "namePlayer") %>% select(namePlayer,slugTeam) %>% left_join(teams, by = "slugTeam") %>% select(namePlayer, nameTeam) %>% mutate(HTML = paste0("{\"nodes\":[{\"type\":\"PARAGRAPH\",\"id\":\"hlkd5116\",\"nodes\":[],\"paragraphData\":{}},{\"type\":\"HTML\",\"id\":\"cps99115\",\"nodes\":[],\"htmlData\":{\"containerData\":{\"textWrap\":true,\"height\":{\"custom\":\"1000\"},\"spoiler\":{},\"alignment\":\"CENTER\",\"width\":{\"custom\":\"1800\"}},\"url\":\"https://raw.githack.com/backironanalytics/my-site-test/main/sheets/",gsub("^(.*?)\\s.*", "\\1",namePlayer),"%20",gsub("^\\S+ ", "",namePlayer),".html\",\"source\":\"HTML\"}},{\"type\":\"PARAGRAPH\",\"id\":\"zuhhp117\",\"nodes\":[],\"paragraphData\":{}}],\"metadata\":{\"version\":1,\"createdTimestamp\":\"2022-12-19T17:56:18.279Z\",\"updatedTimestamp\":\"2022-12-19T17:56:18.279Z\",\"id\":\"857a69b7-4e6b-4821-973a-064010acd74b\"},\"documentStyle\":{}}")),"jobs_test2.csv")
for (i in next_team_batch) {
rmarkdown::render(input = 'C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/ML_Parlay_TBRv10_2025.Rmd',
output_file = paste0(i,".html"),
output_dir = file.path('C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/sheets'),
params = list(player = i))
}
library(tidyverse)
library(nbastatR)
library(dplyr)
library(flexdashboard)
library(parallel)
library(rvest)
rosters <- read.csv("rosters.csv")
rosters_id <- rosters %>% filter(Include == "Y") %>% pull(idPlayer)
rosters_names <- rosters %>% filter(Include == "Y") %>% pull(namePlayer)
rosters_teams <- rosters %>% filter(Include == "Y") %>% pull(idTeam)
Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2)
all_rosters <- seasons_rosters(seasons = 2025, return_message = FALSE)
playerdata <- game_logs(seasons = 2024:2025, result_types = "player", season_types = c("Regular Season"))
playerdata_playoffs <- game_logs(seasons = 2024, result_types = "player", season_types = c("Playoffs"))
playerdata <- bind_rows(playerdata, playerdata_playoffs)
player_name <- function(x){
playerdata %>% filter(idPlayer == x) %>%
select(dateGame, idGame, slugOpponent, idPlayer, namePlayer, fgm,fga,pts,treb,ast,stl,blk,fg3m,fg3a,tov,
plusminus,minutes,locationGame, countDaysRestPlayer, isB2B, isB2BFirst, isB2BSecond) %>% group_by(namePlayer) %>% summarize(n = n()) %>% pull(namePlayer)
}
player_name <- lapply(rosters_id,player_name)
players <- player_name
players <- unlist(players)
gameids<- playerdata %>% group_by(idGame) %>% summarize(n = n()) %>% pull(idGame)
numcores <- parallelly::availableCores()
cl <- makeCluster(numcores)
my_function <- function(x) {
library(tidyverse)
library(nbastatR)
play_play <- play_by_play_v2(game_ids = x,nest_data = F)
}
results <- parLapply(cl,gameids,my_function)
play_play <- bind_rows(results)
stopCluster(cl)
#Schedule
teams <- nba_teams(league = "NBA")
teams <- teams %>% filter(idLeague == 2, idConference != 0) %>% select(cityTeam, slugTeam, idTeam, nameTeam, urlThumbnailTeam) %>% rename(Opponent = cityTeam)
slugteams <- teams %>% select(slugTeam)
slugteams_list <- slugteams %>% mutate(slugTeam = tolower(slugTeam)) %>%
mutate(slugTeam = ifelse(slugTeam == "uta","utah",
ifelse(slugTeam == "nop","no",slugTeam))) %>% pull(slugTeam)
schedule <- lapply(slugteams_list, function(x){
testurl <- paste0("https://www.espn.com/nba/team/schedule/_/name/",x,"/seasontype/2")
h <- read_html(testurl)
tab <- h |> html_nodes("table")
tab <- tab[[1]] |> html_table()
tab <- tab |> setNames(c("Date", "Opponenet", "Time", "TV","Tickets","Tickets_dup","Unused1","Unused2"))
tab <- tab[-(1:2),]
tab <- tab %>% mutate(location = ifelse(str_detect(Opponenet,"@"),"Away","Home")) %>%
mutate(Opponent = ifelse(location == "Home", str_sub(Opponenet,3),str_sub(Opponenet,2))) %>%
mutate(Date = str_extract(Date, '\\b[^,]+$')) %>% mutate(Date = as.Date(Date, "%b%d")) %>% select(Date,location,Opponent)
tab <- tab %>% left_join(teams, by = "Opponent") %>% mutate(Team = toupper(x)) %>%
mutate(Team = ifelse(Team == "UTAH","UTA",ifelse(Team == "NO","NOP",Team))) %>% mutate(next_game = ifelse(Date >= Sys.Date(),TRUE,FALSE)) %>%
mutate(game_number = 1:n())
})
schedule <- bind_rows(schedule)
schedule <- schedule %>% filter(!is.na(Date))
#Next Game
next_game_date_teams <- schedule %>% filter(Date == schedule %>% filter(next_game == TRUE) %>% pull(Date) %>% min) %>% pull(slugTeam)
next_team_batch <- lapply(next_game_date_teams, function(x){
rosters %>% filter(slugTeam == x) %>% filter(Include == "Y") %>% select(idPlayer,namePlayer)
})
next_team_batch <- bind_rows(next_team_batch)
next_team_batch <- next_team_batch %>% left_join(playerdata %>% filter(slugSeason == "2024-25") %>% group_by(idPlayer) %>% summarize(n = n()) %>% ungroup(), by = "idPlayer") %>% filter(n >=1)
next_team_batch <- next_team_batch %>% pull(namePlayer)
#Previous Game
previous_game_date_teams <- schedule %>% filter(Date == schedule %>% filter(next_game == TRUE) %>% pull(Date) %>% min +1) %>% pull(slugTeam)
previous_team_batch <- lapply(previous_game_date_teams, function(x){
rosters %>% filter(slugTeam == x) %>% filter(Include == "Y") %>% select(idPlayer,namePlayer)
})
previous_team_batch <- bind_rows(previous_team_batch)
previous_team_batch <- previous_team_batch %>% left_join(playerdata %>% filter(slugSeason == "2024-25") %>% group_by(idPlayer) %>% summarize(n = n()) %>% ungroup(), by = "idPlayer") %>% filter(n >=1)
previous_team_batch <- previous_team_batch %>% pull(namePlayer)
wix_jobs <- write.csv(as.data.frame(players) %>% rename(namePlayer = players) %>% left_join(playerdata %>% filter(slugSeason == "2024-25") %>% group_by(namePlayer,slugTeam) %>% summarize(n = n()), by = "namePlayer") %>% select(namePlayer,slugTeam) %>% left_join(teams, by = "slugTeam") %>% select(namePlayer, nameTeam) %>% mutate(HTML = paste0("{\"nodes\":[{\"type\":\"PARAGRAPH\",\"id\":\"hlkd5116\",\"nodes\":[],\"paragraphData\":{}},{\"type\":\"HTML\",\"id\":\"cps99115\",\"nodes\":[],\"htmlData\":{\"containerData\":{\"textWrap\":true,\"height\":{\"custom\":\"1000\"},\"spoiler\":{},\"alignment\":\"CENTER\",\"width\":{\"custom\":\"1800\"}},\"url\":\"https://raw.githack.com/backironanalytics/my-site-test/main/sheets/",gsub("^(.*?)\\s.*", "\\1",namePlayer),"%20",gsub("^\\S+ ", "",namePlayer),".html\",\"source\":\"HTML\"}},{\"type\":\"PARAGRAPH\",\"id\":\"zuhhp117\",\"nodes\":[],\"paragraphData\":{}}],\"metadata\":{\"version\":1,\"createdTimestamp\":\"2022-12-19T17:56:18.279Z\",\"updatedTimestamp\":\"2022-12-19T17:56:18.279Z\",\"id\":\"857a69b7-4e6b-4821-973a-064010acd74b\"},\"documentStyle\":{}}")),"jobs_test2.csv")
for (i in next_team_batch) {
rmarkdown::render(input = 'C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/ML_Parlay_TBRv10_2025.Rmd',
output_file = paste0(i,".html"),
output_dir = file.path('C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/sheets'),
params = list(player = i))
}
all_rosters
?seasons_rosters
for (i in next_team_batch) {
rmarkdown::render(input = 'C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/ML_Parlay_TBRv10_2025.Rmd',
output_file = paste0(i,".html"),
output_dir = file.path('C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/sheets'),
params = list(player = i))
}
for (i in next_team_batch) {
rmarkdown::render(input = 'C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/ML_Parlay_TBRv10_2025.Rmd',
output_file = paste0(i,".html"),
output_dir = file.path('C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/sheets'),
params = list(player = i))
}
all_rosters <- seasons_rosters(seasons = 2025, return_message = FALSE)
all_rosters <- all_rosters %>% filter(idPlayer == player_id[1])
all_rosters
for (i in next_team_batch) {
rmarkdown::render(input = 'C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/ML_Parlay_TBRv10_2025.Rmd',
output_file = paste0(i,".html"),
output_dir = file.path('C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/sheets'),
params = list(player = i))
}
player_name <- playerdata %>% filter(idPlayer == player_id) %>%
select(dateGame, idGame, slugOpponent, idPlayer, namePlayer, fgm,fga,pts,treb,ast,stl,blk,fg3m,fg3a,tov,
plusminus,minutes,locationGame, countDaysRestPlayer, isB2B, isB2BFirst, isB2BSecond) %>% pull(namePlayer)
slug_team <- all_rosters %>% filter(idPlayer == player_id) %>% select(slugTeam)
player_id
for (i in next_team_batch) {
rmarkdown::render(input = 'C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/ML_Parlay_TBRv10_2025.Rmd',
output_file = paste0(i,".html"),
output_dir = file.path('C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/sheets'),
params = list(player = i))
}
all_rosters
floor(all_rosters$heightInches)
floor(all_rosters$heightInches/12)
for (i in next_team_batch) {
rmarkdown::render(input = 'C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/ML_Parlay_TBRv10_2025.Rmd',
output_file = paste0(i,".html"),
output_dir = file.path('C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/sheets'),
params = list(player = i))
}
all_rosters
all_rosters$weightLBS
playerdata
library(tidyverse)
library(nbastatR)
library(dplyr)
library(flexdashboard)
library(parallel)
library(rvest)
rosters <- read.csv("rosters.csv")
rosters_id <- rosters %>% filter(Include == "Y") %>% pull(idPlayer)
rosters_names <- rosters %>% filter(Include == "Y") %>% pull(namePlayer)
rosters_teams <- rosters %>% filter(Include == "Y") %>% pull(idTeam)
Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2)
all_rosters <- seasons_rosters(seasons = 2025, return_message = FALSE)
playerdata <- game_logs(seasons = 2024:2025, result_types = "player", season_types = c("Regular Season"))
playerdata_playoffs <- game_logs(seasons = 2024, result_types = "player", season_types = c("Playoffs"))
playerdata <- bind_rows(playerdata, playerdata_playoffs)
player_name <- function(x){
playerdata %>% filter(idPlayer == x) %>%
select(dateGame, idGame, slugOpponent, idPlayer, namePlayer, fgm,fga,pts,treb,ast,stl,blk,fg3m,fg3a,tov,
plusminus,minutes,locationGame, countDaysRestPlayer, isB2B, isB2BFirst, isB2BSecond) %>% group_by(namePlayer) %>% summarize(n = n()) %>% pull(namePlayer)
}
player_name <- lapply(rosters_id,player_name)
players <- player_name
players <- unlist(players)
gameids<- playerdata %>% group_by(idGame) %>% summarize(n = n()) %>% pull(idGame)
numcores <- parallelly::availableCores()
cl <- makeCluster(numcores)
my_function <- function(x) {
library(tidyverse)
library(nbastatR)
play_play <- play_by_play_v2(game_ids = x,nest_data = F)
}
results <- parLapply(cl,gameids,my_function)
play_play <- bind_rows(results)
stopCluster(cl)
#Schedule
teams <- nba_teams(league = "NBA")
teams <- teams %>% filter(idLeague == 2, idConference != 0) %>% select(cityTeam, slugTeam, idTeam, nameTeam, urlThumbnailTeam) %>% rename(Opponent = cityTeam)
slugteams <- teams %>% select(slugTeam)
slugteams_list <- slugteams %>% mutate(slugTeam = tolower(slugTeam)) %>%
mutate(slugTeam = ifelse(slugTeam == "uta","utah",
ifelse(slugTeam == "nop","no",slugTeam))) %>% pull(slugTeam)
schedule <- lapply(slugteams_list, function(x){
testurl <- paste0("https://www.espn.com/nba/team/schedule/_/name/",x,"/seasontype/2")
h <- read_html(testurl)
tab <- h |> html_nodes("table")
tab <- tab[[1]] |> html_table()
tab <- tab |> setNames(c("Date", "Opponenet", "Time", "TV","Tickets","Tickets_dup","Unused1","Unused2"))
tab <- tab[-(1:2),]
tab <- tab %>% mutate(location = ifelse(str_detect(Opponenet,"@"),"Away","Home")) %>%
mutate(Opponent = ifelse(location == "Home", str_sub(Opponenet,3),str_sub(Opponenet,2))) %>%
mutate(Date = str_extract(Date, '\\b[^,]+$')) %>% mutate(Date = as.Date(Date, "%b%d")) %>% select(Date,location,Opponent)
tab <- tab %>% left_join(teams, by = "Opponent") %>% mutate(Team = toupper(x)) %>%
mutate(Team = ifelse(Team == "UTAH","UTA",ifelse(Team == "NO","NOP",Team))) %>% mutate(next_game = ifelse(Date >= Sys.Date(),TRUE,FALSE)) %>%
mutate(game_number = 1:n())
})
schedule <- bind_rows(schedule)
schedule <- schedule %>% filter(!is.na(Date))
#Next Game
next_game_date_teams <- schedule %>% filter(Date == schedule %>% filter(next_game == TRUE) %>% pull(Date) %>% min) %>% pull(slugTeam)
next_team_batch <- lapply(next_game_date_teams, function(x){
rosters %>% filter(slugTeam == x) %>% filter(Include == "Y") %>% select(idPlayer,namePlayer)
})
next_team_batch <- bind_rows(next_team_batch)
next_team_batch <- next_team_batch %>% left_join(playerdata %>% filter(slugSeason == "2024-25") %>% group_by(idPlayer) %>% summarize(n = n()) %>% ungroup(), by = "idPlayer") %>% filter(n >=1)
next_team_batch <- next_team_batch %>% pull(namePlayer)
#Previous Game
previous_game_date_teams <- schedule %>% filter(Date == schedule %>% filter(next_game == TRUE) %>% pull(Date) %>% min +1) %>% pull(slugTeam)
previous_team_batch <- lapply(previous_game_date_teams, function(x){
rosters %>% filter(slugTeam == x) %>% filter(Include == "Y") %>% select(idPlayer,namePlayer)
})
previous_team_batch <- bind_rows(previous_team_batch)
previous_team_batch <- previous_team_batch %>% left_join(playerdata %>% filter(slugSeason == "2024-25") %>% group_by(idPlayer) %>% summarize(n = n()) %>% ungroup(), by = "idPlayer") %>% filter(n >=1)
previous_team_batch <- previous_team_batch %>% pull(namePlayer)
wix_jobs <- write.csv(as.data.frame(players) %>% rename(namePlayer = players) %>% left_join(playerdata %>% filter(slugSeason == "2024-25") %>% group_by(namePlayer,slugTeam) %>% summarize(n = n()), by = "namePlayer") %>% select(namePlayer,slugTeam) %>% left_join(teams, by = "slugTeam") %>% select(namePlayer, nameTeam) %>% mutate(HTML = paste0("{\"nodes\":[{\"type\":\"PARAGRAPH\",\"id\":\"hlkd5116\",\"nodes\":[],\"paragraphData\":{}},{\"type\":\"HTML\",\"id\":\"cps99115\",\"nodes\":[],\"htmlData\":{\"containerData\":{\"textWrap\":true,\"height\":{\"custom\":\"1000\"},\"spoiler\":{},\"alignment\":\"CENTER\",\"width\":{\"custom\":\"1800\"}},\"url\":\"https://raw.githack.com/backironanalytics/my-site-test/main/sheets/",gsub("^(.*?)\\s.*", "\\1",namePlayer),"%20",gsub("^\\S+ ", "",namePlayer),".html\",\"source\":\"HTML\"}},{\"type\":\"PARAGRAPH\",\"id\":\"zuhhp117\",\"nodes\":[],\"paragraphData\":{}}],\"metadata\":{\"version\":1,\"createdTimestamp\":\"2022-12-19T17:56:18.279Z\",\"updatedTimestamp\":\"2022-12-19T17:56:18.279Z\",\"id\":\"857a69b7-4e6b-4821-973a-064010acd74b\"},\"documentStyle\":{}}")),"jobs_test2.csv")
for (i in next_team_batch) {
rmarkdown::render(input = 'C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/ML_Parlay_TBRv10_2025.Rmd',
output_file = paste0(i,".html"),
output_dir = file.path('C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/sheets'),
params = list(player = i))
}
library(tidyverse)
library(nbastatR)
library(dplyr)
library(flexdashboard)
library(parallel)
library(rvest)
rosters <- read.csv("rosters.csv")
rosters_id <- rosters %>% filter(Include == "Y") %>% pull(idPlayer)
rosters_names <- rosters %>% filter(Include == "Y") %>% pull(namePlayer)
rosters_teams <- rosters %>% filter(Include == "Y") %>% pull(idTeam)
Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2)
all_rosters <- seasons_rosters(seasons = 2025, return_message = FALSE)
playerdata <- game_logs(seasons = 2024:2025, result_types = "player", season_types = c("Regular Season"))
playerdata_playoffs <- game_logs(seasons = 2024, result_types = "player", season_types = c("Playoffs"))
playerdata <- bind_rows(playerdata, playerdata_playoffs)
player_name <- function(x){
playerdata %>% filter(idPlayer == x) %>%
select(dateGame, idGame, slugOpponent, idPlayer, namePlayer, fgm,fga,pts,treb,ast,stl,blk,fg3m,fg3a,tov,
plusminus,minutes,locationGame, countDaysRestPlayer, isB2B, isB2BFirst, isB2BSecond) %>% group_by(namePlayer) %>% summarize(n = n()) %>% pull(namePlayer)
}
player_name <- lapply(rosters_id,player_name)
players <- player_name
players <- unlist(players)
gameids<- playerdata %>% group_by(idGame) %>% summarize(n = n()) %>% pull(idGame)
numcores <- parallelly::availableCores()
cl <- makeCluster(numcores)
my_function <- function(x) {
library(tidyverse)
library(nbastatR)
play_play <- play_by_play_v2(game_ids = x,nest_data = F)
}
results <- parLapply(cl,gameids,my_function)
play_play <- bind_rows(results)
stopCluster(cl)
#Schedule
teams <- nba_teams(league = "NBA")
teams <- teams %>% filter(idLeague == 2, idConference != 0) %>% select(cityTeam, slugTeam, idTeam, nameTeam, urlThumbnailTeam) %>% rename(Opponent = cityTeam)
slugteams <- teams %>% select(slugTeam)
slugteams_list <- slugteams %>% mutate(slugTeam = tolower(slugTeam)) %>%
mutate(slugTeam = ifelse(slugTeam == "uta","utah",
ifelse(slugTeam == "nop","no",slugTeam))) %>% pull(slugTeam)
schedule <- lapply(slugteams_list, function(x){
testurl <- paste0("https://www.espn.com/nba/team/schedule/_/name/",x,"/seasontype/2")
h <- read_html(testurl)
tab <- h |> html_nodes("table")
tab <- tab[[1]] |> html_table()
tab <- tab |> setNames(c("Date", "Opponenet", "Time", "TV","Tickets","Tickets_dup","Unused1","Unused2"))
tab <- tab[-(1:2),]
tab <- tab %>% mutate(location = ifelse(str_detect(Opponenet,"@"),"Away","Home")) %>%
mutate(Opponent = ifelse(location == "Home", str_sub(Opponenet,3),str_sub(Opponenet,2))) %>%
mutate(Date = str_extract(Date, '\\b[^,]+$')) %>% mutate(Date = as.Date(Date, "%b%d")) %>% select(Date,location,Opponent)
tab <- tab %>% left_join(teams, by = "Opponent") %>% mutate(Team = toupper(x)) %>%
mutate(Team = ifelse(Team == "UTAH","UTA",ifelse(Team == "NO","NOP",Team))) %>% mutate(next_game = ifelse(Date >= Sys.Date(),TRUE,FALSE)) %>%
mutate(game_number = 1:n())
})
schedule <- bind_rows(schedule)
schedule <- schedule %>% filter(!is.na(Date))
#Next Game
next_game_date_teams <- schedule %>% filter(Date == schedule %>% filter(next_game == TRUE) %>% pull(Date) %>% min) %>% pull(slugTeam)
next_team_batch <- lapply(next_game_date_teams, function(x){
rosters %>% filter(slugTeam == x) %>% filter(Include == "Y") %>% select(idPlayer,namePlayer)
})
next_team_batch <- bind_rows(next_team_batch)
next_team_batch <- next_team_batch %>% left_join(playerdata %>% filter(slugSeason == "2024-25") %>% group_by(idPlayer) %>% summarize(n = n()) %>% ungroup(), by = "idPlayer") %>% filter(n >=1)
#next_team_batch <- next_team_batch %>% pull(namePlayer)
#Previous Game
previous_game_date_teams <- schedule %>% filter(Date == schedule %>% filter(next_game == TRUE) %>% pull(Date) %>% min +1) %>% pull(slugTeam)
previous_team_batch <- lapply(previous_game_date_teams, function(x){
rosters %>% filter(slugTeam == x) %>% filter(Include == "Y") %>% select(idPlayer,namePlayer)
})
previous_team_batch <- bind_rows(previous_team_batch)
previous_team_batch <- previous_team_batch %>% left_join(playerdata %>% filter(slugSeason == "2024-25") %>% group_by(idPlayer) %>% summarize(n = n()) %>% ungroup(), by = "idPlayer") %>% filter(n >=1)
previous_team_batch <- previous_team_batch %>% pull(namePlayer)
sample <- "Kelly Oubre Jr."
wix_jobs <- write.csv(as.data.frame(players) %>% rename(namePlayer = players) %>% left_join(playerdata %>% filter(slugSeason == "2024-25") %>% group_by(namePlayer,idPlayer,slugTeam) %>% summarize(n = n()), by = "namePlayer") %>% select(namePlayer,idPlayer,slugTeam) %>% left_join(teams, by = "slugTeam") %>% select(namePlayer, idPlayer, nameTeam) %>% mutate(HTML = paste0("{\"nodes\":[{\"type\":\"PARAGRAPH\",\"id\":\"hlkd5116\",\"nodes\":[],\"paragraphData\":{}},{\"type\":\"HTML\",\"id\":\"cps99115\",\"nodes\":[],\"htmlData\":{\"containerData\":{\"textWrap\":true,\"height\":{\"custom\":\"1000\"},\"spoiler\":{},\"alignment\":\"CENTER\",\"width\":{\"custom\":\"1800\"}},\"url\":\"https://raw.githack.com/backironanalytics/my-site-test/main/sheets/",gsub("^(.*?)\\s.*", "\\1",namePlayer),"%20",gsub("^\\S+ ", "",namePlayer),idPlayer,substr(idPlayer,start = 1, stop =3),".html\",\"source\":\"HTML\"}},{\"type\":\"PARAGRAPH\",\"id\":\"zuhhp117\",\"nodes\":[],\"paragraphData\":{}}],\"metadata\":{\"version\":1,\"createdTimestamp\":\"2022-12-19T17:56:18.279Z\",\"updatedTimestamp\":\"2022-12-19T17:56:18.279Z\",\"id\":\"857a69b7-4e6b-4821-973a-064010acd74b\"},\"documentStyle\":{}}")),"jobs_test2.csv")
library(foreach)
foreach(i = next_team_batch$namePlayer, j = next_team_batch$idPlayer) %do% {
rmarkdown::render(input = 'C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/ML_Parlay_TBRv10_2025.Rmd',
output_file = paste0(i,j,substr(j,start = 1, stop =3),".html"),
output_dir = file.path('C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/sheets'),
params = list(player = i))
}
