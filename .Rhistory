})
output$plot2<- renderPlotly({
metric = "minutes"
p <- player_data %>% filter(typeSeason == "Regular Season", slugSeason == current_season, namePlayer == input$player) %>% ggplot(aes(.data[[metric]])) + geom_histogram(bins = input$slider, color = secondary_color, fill = primary_color)+ scale_x_continuous(breaks = seq(0,90,2))+ ggtitle(toupper(paste(params$player,"Regular Season",metric,"histogram"))) + theme_minimal()+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplotly(p) %>% layout(title = list(text = toupper(paste(input$player,metric,"histogram",'<br>','<sup>',toupper("Current Regular Season"),'</sup>'))))
})
}
shinyApp(ui, server)
ui <-
page_fluid(
dashboardHeader(title = "Dollar Data Science"),
dashboardSidebar(
sidebarMenu(
selectInput(inputId = "player",
label = "Choose Player",
choices = player_test,
selected = NULL),
menuItem("Season Stats",tabName = "stats", icon = icon("dashboard")),
menuItem("Exploratory Analysis", icon = icon("th"), tabName = "analysis", badgeLabel = "new", badgeColor = "green")
)),
dashboardBody(
tabItems(
tabItem(tabName = "stats",
fluidPage(
formattableOutput("table")),
),
tabItem(tabName = "analysis",
fluidRow(
column(width = 12,
box(
title = "Bin Selector",
sliderInput("slider","Select # of Bins:",1,10,1)
),
box(
plotlyOutput("plot2", height = 500)))
),
fluidPage(
column(width = 12,
box(
plotlyOutput("plot1", height = 500))),
)
)
)
))
server <- function(input, output) {
output$table<- renderFormattable({
frame_test %>% filter(namePlayer == input$player)
})
output$plot1<- renderPlotly({
metric = "minutes"
avg <- mean(player_data %>% filter(typeSeason == "Regular Season", slugSeason == current_season) %>% pull(metric))
avg_lastx <- mean(player_data %>% arrange(desc(dateGame)) %>% head(params$games) %>% pull(metric))
p <- player_data %>% filter(namePlayer == input$player) %>% ggplot(aes(dateGame,.data[[metric]], label = slugOpponent)) +geom_line() + geom_point(aes(color = locationGame, shape = typeSeason)) + geom_smooth(span = 0.6) + labs(x = "Date")  + scale_y_continuous(breaks = seq(0,90,2)) + geom_hline(yintercept = avg) + ggtitle(toupper(paste(input$player,metric,"Per Game")), subtitle = toupper(paste("Current Season Avg:",round(avg,1),"/","Avg Last",params$games,"games:",round(avg_lastx,1)))) + theme_minimal() + scale_x_date(breaks = "1 month", date_labels = "%b") + scale_color_manual(values = c(primary_color,secondary_color)) + scale_shape_manual(values = c(15,16)) + facet_grid(~ slugSeason, scales = "free_x")+ guides(color = guide_legend(title = ""),shape = guide_legend(title = ""))
ggplotly(p) %>% layout(legend = list(orientation = "h", x = 0, y = -0.2),
title = list(text = toupper(paste(input$player,metric,"Per Game",'<br>','<sup>',toupper(paste("Current Season Avg:",round(avg,1),"/","Avg Last",params$games,"games:",round(avg_lastx,1))),'</sup>'))))
})
output$plot2<- renderPlotly({
metric = "minutes"
p <- player_data %>% filter(typeSeason == "Regular Season", slugSeason == current_season, namePlayer == input$player) %>% ggplot(aes(.data[[metric]])) + geom_histogram(bins = input$slider, color = secondary_color, fill = primary_color)+ scale_x_continuous(breaks = seq(0,90,2))+ ggtitle(toupper(paste(params$player,"Regular Season",metric,"histogram"))) + theme_minimal()+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplotly(p) %>% layout(title = list(text = toupper(paste(input$player,metric,"histogram",'<br>','<sup>',toupper("Current Regular Season"),'</sup>'))))
})
}
shinyApp(ui, server)
library(tidyverse)
library(nbastatR)
library(dplyr)
library(flexdashboard)
library(parallel)
library(rvest)
rosters <- read.csv("rosters.csv")
rosters_id <- rosters %>% filter(Include == "Y") %>% pull(idPlayer)
rosters_names <- rosters %>% filter(Include == "Y") %>% pull(namePlayer)
rosters_teams <- rosters %>% filter(Include == "Y") %>% pull(idTeam)
Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2)
all_rosters <- seasons_rosters(seasons = 2025, return_message = FALSE)
playerdata <- game_logs(seasons = 2024:2025, result_types = "player", season_types = c("Regular Season"))
playerdata_playoffs <- game_logs(seasons = 2024, result_types = "player", season_types = c("Playoffs"))
playerdata <- bind_rows(playerdata, playerdata_playoffs)
player_name <- function(x){
playerdata %>% filter(idPlayer == x) %>%
select(dateGame, idGame, slugOpponent, idPlayer, namePlayer, fgm,fga,pts,treb,ast,stl,blk,fg3m,fg3a,tov,
plusminus,minutes,locationGame, countDaysRestPlayer, isB2B, isB2BFirst, isB2BSecond) %>% group_by(namePlayer) %>% summarize(n = n()) %>% pull(namePlayer)
}
player_name <- lapply(rosters_id,player_name)
players <- player_name
players <- unlist(players)
gameids<- playerdata %>% group_by(idGame) %>% summarize(n = n()) %>% pull(idGame)
numcores <- parallelly::availableCores()
cl <- makeCluster(numcores)
my_function <- function(x) {
library(tidyverse)
library(nbastatR)
play_play <- play_by_play_v2(game_ids = x,nest_data = F)
}
results <- parLapply(cl,gameids,my_function)
play_play <- bind_rows(results)
stopCluster(cl)
#Schedule
teams <- nba_teams(league = "NBA")
teams <- teams %>% filter(idLeague == 2, idConference != 0) %>% select(cityTeam, slugTeam, idTeam, nameTeam, urlThumbnailTeam) %>% rename(Opponent = cityTeam)
slugteams <- teams %>% select(slugTeam)
slugteams_list <- slugteams %>% mutate(slugTeam = tolower(slugTeam)) %>%
mutate(slugTeam = ifelse(slugTeam == "uta","utah",
ifelse(slugTeam == "nop","no",slugTeam))) %>% pull(slugTeam)
schedule <- lapply(slugteams_list, function(x){
testurl <- paste0("https://www.espn.com/nba/team/schedule/_/name/",x,"/seasontype/2")
h <- read_html(testurl)
tab <- h |> html_nodes("table")
tab <- tab[[1]] |> html_table()
tab <- tab |> setNames(c("Date", "Opponenet", "Time", "TV","Tickets","Tickets_dup","Unused1","Unused2"))
tab <- tab[-(1:2),]
tab <- tab %>% mutate(location = ifelse(str_detect(Opponenet,"@"),"Away","Home")) %>%
mutate(Opponent = ifelse(location == "Home", str_sub(Opponenet,3),str_sub(Opponenet,2))) %>%
mutate(Date = str_extract(Date, '\\b[^,]+$')) %>% mutate(Date = as.Date(Date, "%b%d")) %>% select(Date,location,Opponent)
tab <- tab %>% left_join(teams, by = "Opponent") %>% mutate(Team = toupper(x)) %>%
mutate(Team = ifelse(Team == "UTAH","UTA",ifelse(Team == "NO","NOP",Team))) %>% mutate(next_game = ifelse(Date >= Sys.Date(),TRUE,FALSE)) %>%
mutate(game_number = 1:n())
})
schedule <- bind_rows(schedule)
schedule <- schedule %>% filter(!is.na(Date))
#Next Game
next_game_date_teams <- schedule %>% filter(Date == schedule %>% filter(next_game == TRUE) %>% pull(Date) %>% min) %>% pull(slugTeam)
next_team_batch <- lapply(next_game_date_teams, function(x){
rosters %>% filter(slugTeam == x) %>% filter(Include == "Y") %>% select(idPlayer,namePlayer)
})
next_team_batch <- bind_rows(next_team_batch)
next_team_batch <- next_team_batch %>% left_join(playerdata %>% filter(slugSeason == "2024-25") %>% group_by(idPlayer) %>% summarize(n = n()) %>% ungroup(), by = "idPlayer") %>% filter(n >=1)
next_team_batch <- next_team_batch %>% pull(namePlayer)
#Previous Game
previous_game_date_teams <- schedule %>% filter(Date == schedule %>% filter(next_game == TRUE) %>% pull(Date) %>% min -1) %>% pull(slugTeam)
previous_team_batch <- lapply(previous_game_date_teams, function(x){
rosters %>% filter(slugTeam == x) %>% filter(Include == "Y") %>% select(idPlayer,namePlayer)
})
previous_team_batch <- bind_rows(previous_team_batch)
previous_team_batch <- previous_team_batch %>% left_join(playerdata %>% filter(slugSeason == "2024-25") %>% group_by(idPlayer) %>% summarize(n = n()) %>% ungroup(), by = "idPlayer") %>% filter(n >=1)
previous_team_batch <- previous_team_batch %>% pull(namePlayer)
wix_jobs <- write.csv(as.data.frame(players) %>% rename(namePlayer = players) %>% left_join(playerdata %>% group_by(namePlayer,slugTeam) %>% summarize(n = n()), by = "namePlayer") %>% select(namePlayer,slugTeam) %>% left_join(teams, by = "slugTeam") %>% select(namePlayer, nameTeam) %>% mutate(HTML = paste0("{\"nodes\":[{\"type\":\"PARAGRAPH\",\"id\":\"hlkd5116\",\"nodes\":[],\"paragraphData\":{}},{\"type\":\"HTML\",\"id\":\"cps99115\",\"nodes\":[],\"htmlData\":{\"containerData\":{\"textWrap\":true,\"height\":{\"custom\":\"1000\"},\"spoiler\":{},\"alignment\":\"CENTER\",\"width\":{\"custom\":\"1500\"}},\"url\":\"https://raw.githack.com/backironanalytics/my-site-test/main/sheets/",gsub("^(.*?)\\s.*", "\\1",namePlayer),"%20",gsub("^\\S+ ", "",namePlayer),".html\",\"source\":\"HTML\"}},{\"type\":\"PARAGRAPH\",\"id\":\"zuhhp117\",\"nodes\":[],\"paragraphData\":{}}],\"metadata\":{\"version\":1,\"createdTimestamp\":\"2022-12-19T17:56:18.279Z\",\"updatedTimestamp\":\"2022-12-19T17:56:18.279Z\",\"id\":\"857a69b7-4e6b-4821-973a-064010acd74b\"},\"documentStyle\":{}}")),"jobs_test2.csv")
for (i in next_team_batch) {
rmarkdown::render(input = 'C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/ML_Parlay_TBRv10_2025.Rmd',
output_file = paste0(i,".html"),
output_dir = file.path('C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/sheets'),
params = list(player = i))
}
install.packages("rsconnect")
rsconnect::setAccountInfo(name='backironanalytics',
token='8AF22FE5DA3138DBC440D6DE3752DCA7',
secret='I4ybONd7SHdlEDJK2N8Goy76d3dbAJm2WZ68A88f')
rsconnect::setAccountInfo(name='backironanalytics', token='8AF22FE5DA3138DBC440D6DE3752DCA7', secret='I4ybONd7SHdlEDJK2N8Goy76d3dbAJm2WZ68A88f')
library(rsconnect)
shiny::runApp('DDS')
library(tidyverse)
library(nbastatR)
library(dplyr)
library(flexdashboard)
library(parallel)
library(rvest)
rosters <- read.csv("rosters.csv")
rosters_id <- rosters %>% filter(Include == "Y") %>% pull(idPlayer)
rosters_names <- rosters %>% filter(Include == "Y") %>% pull(namePlayer)
rosters_teams <- rosters %>% filter(Include == "Y") %>% pull(idTeam)
Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2)
all_rosters <- seasons_rosters(seasons = 2025, return_message = FALSE)
playerdata <- game_logs(seasons = 2024:2025, result_types = "player", season_types = c("Regular Season"))
playerdata_playoffs <- game_logs(seasons = 2024, result_types = "player", season_types = c("Playoffs"))
playerdata <- bind_rows(playerdata, playerdata_playoffs)
player_name <- function(x){
playerdata %>% filter(idPlayer == x) %>%
select(dateGame, idGame, slugOpponent, idPlayer, namePlayer, fgm,fga,pts,treb,ast,stl,blk,fg3m,fg3a,tov,
plusminus,minutes,locationGame, countDaysRestPlayer, isB2B, isB2BFirst, isB2BSecond) %>% group_by(namePlayer) %>% summarize(n = n()) %>% pull(namePlayer)
}
player_name <- lapply(rosters_id,player_name)
players <- player_name
players <- unlist(players)
gameids<- playerdata %>% group_by(idGame) %>% summarize(n = n()) %>% pull(idGame)
numcores <- parallelly::availableCores()
cl <- makeCluster(numcores)
my_function <- function(x) {
library(tidyverse)
library(nbastatR)
play_play <- play_by_play_v2(game_ids = x,nest_data = F)
}
results <- parLapply(cl,gameids,my_function)
play_play <- bind_rows(results)
stopCluster(cl)
#Schedule
teams <- nba_teams(league = "NBA")
teams <- teams %>% filter(idLeague == 2, idConference != 0) %>% select(cityTeam, slugTeam, idTeam, nameTeam, urlThumbnailTeam) %>% rename(Opponent = cityTeam)
slugteams <- teams %>% select(slugTeam)
slugteams_list <- slugteams %>% mutate(slugTeam = tolower(slugTeam)) %>%
mutate(slugTeam = ifelse(slugTeam == "uta","utah",
ifelse(slugTeam == "nop","no",slugTeam))) %>% pull(slugTeam)
schedule <- lapply(slugteams_list, function(x){
testurl <- paste0("https://www.espn.com/nba/team/schedule/_/name/",x,"/seasontype/2")
h <- read_html(testurl)
tab <- h |> html_nodes("table")
tab <- tab[[1]] |> html_table()
tab <- tab |> setNames(c("Date", "Opponenet", "Time", "TV","Tickets","Tickets_dup","Unused1","Unused2"))
tab <- tab[-(1:2),]
tab <- tab %>% mutate(location = ifelse(str_detect(Opponenet,"@"),"Away","Home")) %>%
mutate(Opponent = ifelse(location == "Home", str_sub(Opponenet,3),str_sub(Opponenet,2))) %>%
mutate(Date = str_extract(Date, '\\b[^,]+$')) %>% mutate(Date = as.Date(Date, "%b%d")) %>% select(Date,location,Opponent)
tab <- tab %>% left_join(teams, by = "Opponent") %>% mutate(Team = toupper(x)) %>%
mutate(Team = ifelse(Team == "UTAH","UTA",ifelse(Team == "NO","NOP",Team))) %>% mutate(next_game = ifelse(Date >= Sys.Date(),TRUE,FALSE)) %>%
mutate(game_number = 1:n())
})
schedule <- bind_rows(schedule)
schedule <- schedule %>% filter(!is.na(Date))
#Next Game
next_game_date_teams <- schedule %>% filter(Date == schedule %>% filter(next_game == TRUE) %>% pull(Date) %>% min) %>% pull(slugTeam)
next_team_batch <- lapply(next_game_date_teams, function(x){
rosters %>% filter(slugTeam == x) %>% filter(Include == "Y") %>% select(idPlayer,namePlayer)
})
next_team_batch <- bind_rows(next_team_batch)
next_team_batch <- next_team_batch %>% left_join(playerdata %>% filter(slugSeason == "2024-25") %>% group_by(idPlayer) %>% summarize(n = n()) %>% ungroup(), by = "idPlayer") %>% filter(n >=1)
next_team_batch <- next_team_batch %>% pull(namePlayer)
#Previous Game
previous_game_date_teams <- schedule %>% filter(Date == schedule %>% filter(next_game == TRUE) %>% pull(Date) %>% min -1) %>% pull(slugTeam)
previous_team_batch <- lapply(previous_game_date_teams, function(x){
rosters %>% filter(slugTeam == x) %>% filter(Include == "Y") %>% select(idPlayer,namePlayer)
})
previous_team_batch <- bind_rows(previous_team_batch)
previous_team_batch <- previous_team_batch %>% left_join(playerdata %>% filter(slugSeason == "2024-25") %>% group_by(idPlayer) %>% summarize(n = n()) %>% ungroup(), by = "idPlayer") %>% filter(n >=1)
previous_team_batch <- previous_team_batch %>% pull(namePlayer)
wix_jobs <- write.csv(as.data.frame(players) %>% rename(namePlayer = players) %>% left_join(playerdata %>% group_by(namePlayer,slugTeam) %>% summarize(n = n()), by = "namePlayer") %>% select(namePlayer,slugTeam) %>% left_join(teams, by = "slugTeam") %>% select(namePlayer, nameTeam) %>% mutate(HTML = paste0("{\"nodes\":[{\"type\":\"PARAGRAPH\",\"id\":\"hlkd5116\",\"nodes\":[],\"paragraphData\":{}},{\"type\":\"HTML\",\"id\":\"cps99115\",\"nodes\":[],\"htmlData\":{\"containerData\":{\"textWrap\":true,\"height\":{\"custom\":\"1000\"},\"spoiler\":{},\"alignment\":\"CENTER\",\"width\":{\"custom\":\"1500\"}},\"url\":\"https://raw.githack.com/backironanalytics/my-site-test/main/sheets/",gsub("^(.*?)\\s.*", "\\1",namePlayer),"%20",gsub("^\\S+ ", "",namePlayer),".html\",\"source\":\"HTML\"}},{\"type\":\"PARAGRAPH\",\"id\":\"zuhhp117\",\"nodes\":[],\"paragraphData\":{}}],\"metadata\":{\"version\":1,\"createdTimestamp\":\"2022-12-19T17:56:18.279Z\",\"updatedTimestamp\":\"2022-12-19T17:56:18.279Z\",\"id\":\"857a69b7-4e6b-4821-973a-064010acd74b\"},\"documentStyle\":{}}")),"jobs_test2.csv")
runApp('DDS')
schedule
runApp('DDS')
schedule
runApp('DDS')
runApp('DDS')
runApp('DDS')
runApp('DDS')
rsconnect::deployApp('"C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/DDS/app.R"')
rsconnect::deployApp("C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/DDS/app.R")
rsconnect::deployApp("C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/DDS/")
rsconnect::deployApp("C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/DDS/")
rsconnect::deployApp("C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/DDS")
rsconnect::deployApp("C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/dollardatascience")
update.packages(ask = F)
play_play
play_play %>% write.csv("play_play.csv")
runApp('dollardatascience')
rsconnect::deployApp("C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/dollardatascience")
rsconnect::deployApp("C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/dollardatascience")
install.packages("parallelly")
install.packages("xfun")
rsconnect::deployApp("C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/dollardatascience")
playerdata
player_data
player_data <- function(x){
playerdata %>% filter(idGame == x) %>%
select(dateGame, idGame, slugOpponent, idPlayer, namePlayer, fgm,fga,pts,treb,ast,stl,blk,fg3m,fg3a,tov,
plusminus,minutes,locationGame, countDaysRestPlayer, isB2B, isB2BFirst, isB2BSecond) %>% group_by(namePlayer) %>% summarize(n = n())
}
player_data <- lapply(player_data,player_id)
Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2)
gamedata <- game_logs(seasons = 2024, result_types = "team", season_types = c("Regular Season","Playoffs"))
library(tidyverse)
library(nbastatR)
library(stringr)
library(caret)
library(ggplot2)
library(ggpubr)
library(knitr)
library(data.table)
library(broom)
library(grid)
library(gridExtra)
library(grDevices)
library(reactablefmtr)
library(formattable)
library(markdown)
library(magick)
library(highcharter)
library(extrafont)
library(cowplot)
library(fmsb)
library(shiny)
library(fontawesome)
library(dplyr)
library(flexdashboard)
library(shinydashboard)
library(ggbreak)
library(plotly)
library(bslib)
library(rsconnect)
Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2)
gamedata <- game_logs(seasons = 2024, result_types = "team", season_types = c("Regular Season","Playoffs"))
gamedata_current <- game_logs(seasons = 2025, result_types = "team", season_types = c("Regular Season"))
current_season <- "2024-25"
last_season <- "2023-24"
gamedata <- bind_rows(gamedata,gamedata_current)
playerdata <- game_logs(seasons = 2024, result_types = "player", season_types = c("Regular Season","Playoffs"))
playerdata_current <- game_logs(seasons = 2025, result_types = "player", season_types = c("Regular Season"))
playerdata <- bind_rows(playerdata,playerdata_current)
season <- playerdata %>% pull(slugSeason)
player_test <- c("LeBron James","Stephen Curry")
player_id <- function(x){
playerdata %>% filter(str_detect(namePlayer,x)) %>%
select(dateGame, idGame, slugOpponent, idPlayer, namePlayer, fgm,fga,pts,treb,ast,stl,blk,fg3m,fg3a,tov,
plusminus,minutes,locationGame, countDaysRestPlayer, isB2B, isB2BFirst, isB2BSecond) %>% group_by(idPlayer) %>% summarize(n = n()) %>% select(idPlayer)
}
player_id <- lapply(player_test,player_id)
player_id <- bind_rows(player_id) %>% pull(idPlayer)
gameids<- playerdata %>% filter(idPlayer %in% player_id)%>% group_by(idGame) %>% summarize(n = n()) %>% pull(idGame)
player_name <- playerdata %>% filter(idPlayer %in% player_id) %>%
select(dateGame, idGame, slugOpponent, idPlayer, namePlayer, fgm,fga,pts,treb,ast,stl,blk,fg3m,fg3a,tov,
plusminus,minutes,locationGame, countDaysRestPlayer, isB2B, isB2BFirst, isB2BSecond) %>% pull(namePlayer)
player_data <- function(x){
playerdata %>% filter(idGame == x) %>%
select(dateGame, idGame, slugOpponent, idPlayer, namePlayer, fgm,fga,pts,treb,ast,stl,blk,fg3m,fg3a,tov,
plusminus,minutes,locationGame, countDaysRestPlayer, isB2B, isB2BFirst, isB2BSecond) %>% group_by(namePlayer) %>% summarize(n = n())
}
player_data <- lapply(player_data,player_id)
playerdata
player_data <- function(x){
playerdata %>% filter(idPlayer == x) %>%
select(dateGame, idGame, slugOpponent, idPlayer, namePlayer, fgm,fga,pts,treb,ast,stl,blk,fg3m,fg3a,tov,
plusminus,minutes,locationGame, countDaysRestPlayer, isB2B, isB2BFirst, isB2BSecond) %>% group_by(namePlayer) %>% summarize(n = n())
}
player_data <- lapply(player_data,player_id)
player_id
player_data <- function(x){
playerdata %>% filter(idPlayer == x) %>%
select(dateGame, idGame, slugOpponent, idPlayer, namePlayer, fgm,fga,pts,treb,ast,stl,blk,fg3m,fg3a,tov,
plusminus,minutes,locationGame, countDaysRestPlayer, isB2B, isB2BFirst, isB2BSecond) %>% group_by(namePlayer) %>% summarize(n = n())
}
player_data <- lapply(player_data,player_id)
player_test
player_id
player_name
gameids
playerdata
player_data <- function(x){
playerdata %>% filter(idGame == x) %>%
select(dateGame, idGame, slugOpponent, idPlayer, namePlayer, fgm,fga,pts,treb,ast,stl,blk,fg3m,fg3a,tov,
plusminus,minutes,locationGame, countDaysRestPlayer, isB2B, isB2BFirst, isB2BSecond) %>% group_by(namePlayer) %>% summarize(n = n())
}
player_data <- lapply(player_data,gameids)
player_data <- function(x){
playerdata %>% filter(idPlayer == x) %>%
select(dateGame, idGame, slugOpponent, idPlayer, namePlayer, fgm,fga,pts,treb,ast,stl,blk,fg3m,fg3a,tov,
plusminus,minutes,locationGame, countDaysRestPlayer, isB2B, isB2BFirst, isB2BSecond) %>% group_by(namePlayer) %>% summarize(n = n())
}
player_data <- lapply(player_id,player_data)
player_data <- bind_rows(player_data)
player_data
player_data <- function(x){
playerdata %>% filter(idPlayer == x) %>%
select(dateGame, idGame, slugOpponent, idPlayer, namePlayer, fgm,fga,pts,treb,ast,stl,blk,fg3m,fg3a,tov,
plusminus,minutes,locationGame, countDaysRestPlayer, isB2B, isB2BFirst, isB2BSecond)
}
player_data <- lapply(player_id,player_data)
player_data <- bind_rows(player_data)
player_data
runApp('dollardatascience')
rsconnect::deployApp("C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/dollardatascience")
rsconnect::deployApp("C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/dollardatascience")
library(tidyverse)
library(nbastatR)
library(dplyr)
library(flexdashboard)
library(parallel)
library(rvest)
rosters <- read.csv("rosters.csv")
rosters_id <- rosters %>% filter(Include == "Y") %>% pull(idPlayer)
rosters_names <- rosters %>% filter(Include == "Y") %>% pull(namePlayer)
rosters_teams <- rosters %>% filter(Include == "Y") %>% pull(idTeam)
Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2)
all_rosters <- seasons_rosters(seasons = 2025, return_message = FALSE)
playerdata <- game_logs(seasons = 2024:2025, result_types = "player", season_types = c("Regular Season"))
playerdata_playoffs <- game_logs(seasons = 2024, result_types = "player", season_types = c("Playoffs"))
playerdata <- bind_rows(playerdata, playerdata_playoffs)
player_name <- function(x){
playerdata %>% filter(idPlayer == x) %>%
select(dateGame, idGame, slugOpponent, idPlayer, namePlayer, fgm,fga,pts,treb,ast,stl,blk,fg3m,fg3a,tov,
plusminus,minutes,locationGame, countDaysRestPlayer, isB2B, isB2BFirst, isB2BSecond) %>% group_by(namePlayer) %>% summarize(n = n()) %>% pull(namePlayer)
}
player_name <- lapply(rosters_id,player_name)
players <- player_name
players <- unlist(players)
gameids<- playerdata %>% group_by(idGame) %>% summarize(n = n()) %>% pull(idGame)
numcores <- parallelly::availableCores()
cl <- makeCluster(numcores)
my_function <- function(x) {
library(tidyverse)
library(nbastatR)
play_play <- play_by_play_v2(game_ids = x,nest_data = F)
}
results <- parLapply(cl,gameids,my_function)
play_play <- bind_rows(results)
stopCluster(cl)
#Schedule
teams <- nba_teams(league = "NBA")
teams <- teams %>% filter(idLeague == 2, idConference != 0) %>% select(cityTeam, slugTeam, idTeam, nameTeam, urlThumbnailTeam) %>% rename(Opponent = cityTeam)
slugteams <- teams %>% select(slugTeam)
slugteams_list <- slugteams %>% mutate(slugTeam = tolower(slugTeam)) %>%
mutate(slugTeam = ifelse(slugTeam == "uta","utah",
ifelse(slugTeam == "nop","no",slugTeam))) %>% pull(slugTeam)
schedule <- lapply(slugteams_list, function(x){
testurl <- paste0("https://www.espn.com/nba/team/schedule/_/name/",x,"/seasontype/2")
h <- read_html(testurl)
tab <- h |> html_nodes("table")
tab <- tab[[1]] |> html_table()
tab <- tab |> setNames(c("Date", "Opponenet", "Time", "TV","Tickets","Tickets_dup","Unused1","Unused2"))
tab <- tab[-(1:2),]
tab <- tab %>% mutate(location = ifelse(str_detect(Opponenet,"@"),"Away","Home")) %>%
mutate(Opponent = ifelse(location == "Home", str_sub(Opponenet,3),str_sub(Opponenet,2))) %>%
mutate(Date = str_extract(Date, '\\b[^,]+$')) %>% mutate(Date = as.Date(Date, "%b%d")) %>% select(Date,location,Opponent)
tab <- tab %>% left_join(teams, by = "Opponent") %>% mutate(Team = toupper(x)) %>%
mutate(Team = ifelse(Team == "UTAH","UTA",ifelse(Team == "NO","NOP",Team))) %>% mutate(next_game = ifelse(Date >= Sys.Date(),TRUE,FALSE)) %>%
mutate(game_number = 1:n())
})
schedule <- bind_rows(schedule)
schedule <- schedule %>% filter(!is.na(Date))
#Next Game
next_game_date_teams <- schedule %>% filter(Date == schedule %>% filter(next_game == TRUE) %>% pull(Date) %>% min) %>% pull(slugTeam)
next_team_batch <- lapply(next_game_date_teams, function(x){
rosters %>% filter(slugTeam == x) %>% filter(Include == "Y") %>% select(idPlayer,namePlayer)
})
next_team_batch <- bind_rows(next_team_batch)
next_team_batch <- next_team_batch %>% left_join(playerdata %>% filter(slugSeason == "2024-25") %>% group_by(idPlayer) %>% summarize(n = n()) %>% ungroup(), by = "idPlayer") %>% filter(n >=1)
next_team_batch <- next_team_batch %>% pull(namePlayer)
#Previous Game
previous_game_date_teams <- schedule %>% filter(Date == schedule %>% filter(next_game == TRUE) %>% pull(Date) %>% min -1) %>% pull(slugTeam)
previous_team_batch <- lapply(previous_game_date_teams, function(x){
rosters %>% filter(slugTeam == x) %>% filter(Include == "Y") %>% select(idPlayer,namePlayer)
})
previous_team_batch <- bind_rows(previous_team_batch)
previous_team_batch <- previous_team_batch %>% left_join(playerdata %>% filter(slugSeason == "2024-25") %>% group_by(idPlayer) %>% summarize(n = n()) %>% ungroup(), by = "idPlayer") %>% filter(n >=1)
previous_team_batch
next_team_batch
next_game_date_teams
previous_game_date_teams <- schedule %>% filter(Date == schedule %>% filter(next_game == TRUE) %>% pull(Date) %>% min -1) %>% pull(slugTeam)
previous_game_date_teams
schedule
library(tidyverse)
library(nbastatR)
library(dplyr)
library(flexdashboard)
library(parallel)
library(rvest)
rosters <- read.csv("rosters.csv")
rosters_id <- rosters %>% filter(Include == "Y") %>% pull(idPlayer)
rosters_names <- rosters %>% filter(Include == "Y") %>% pull(namePlayer)
rosters_teams <- rosters %>% filter(Include == "Y") %>% pull(idTeam)
Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2)
all_rosters <- seasons_rosters(seasons = 2025, return_message = FALSE)
playerdata <- game_logs(seasons = 2024:2025, result_types = "player", season_types = c("Regular Season"))
playerdata_playoffs <- game_logs(seasons = 2024, result_types = "player", season_types = c("Playoffs"))
playerdata <- bind_rows(playerdata, playerdata_playoffs)
player_name <- function(x){
playerdata %>% filter(idPlayer == x) %>%
select(dateGame, idGame, slugOpponent, idPlayer, namePlayer, fgm,fga,pts,treb,ast,stl,blk,fg3m,fg3a,tov,
plusminus,minutes,locationGame, countDaysRestPlayer, isB2B, isB2BFirst, isB2BSecond) %>% group_by(namePlayer) %>% summarize(n = n()) %>% pull(namePlayer)
}
player_name <- lapply(rosters_id,player_name)
players <- player_name
players <- unlist(players)
gameids<- playerdata %>% group_by(idGame) %>% summarize(n = n()) %>% pull(idGame)
numcores <- parallelly::availableCores()
cl <- makeCluster(numcores)
my_function <- function(x) {
library(tidyverse)
library(nbastatR)
play_play <- play_by_play_v2(game_ids = x,nest_data = F)
}
results <- parLapply(cl,gameids,my_function)
play_play <- bind_rows(results)
stopCluster(cl)
#Schedule
teams <- nba_teams(league = "NBA")
teams <- teams %>% filter(idLeague == 2, idConference != 0) %>% select(cityTeam, slugTeam, idTeam, nameTeam, urlThumbnailTeam) %>% rename(Opponent = cityTeam)
slugteams <- teams %>% select(slugTeam)
slugteams_list <- slugteams %>% mutate(slugTeam = tolower(slugTeam)) %>%
mutate(slugTeam = ifelse(slugTeam == "uta","utah",
ifelse(slugTeam == "nop","no",slugTeam))) %>% pull(slugTeam)
schedule <- lapply(slugteams_list, function(x){
testurl <- paste0("https://www.espn.com/nba/team/schedule/_/name/",x,"/seasontype/2")
h <- read_html(testurl)
tab <- h |> html_nodes("table")
tab <- tab[[1]] |> html_table()
tab <- tab |> setNames(c("Date", "Opponenet", "Time", "TV","Tickets","Tickets_dup","Unused1","Unused2"))
tab <- tab[-(1:2),]
tab <- tab %>% mutate(location = ifelse(str_detect(Opponenet,"@"),"Away","Home")) %>%
mutate(Opponent = ifelse(location == "Home", str_sub(Opponenet,3),str_sub(Opponenet,2))) %>%
mutate(Date = str_extract(Date, '\\b[^,]+$')) %>% mutate(Date = as.Date(Date, "%b%d")) %>% select(Date,location,Opponent)
tab <- tab %>% left_join(teams, by = "Opponent") %>% mutate(Team = toupper(x)) %>%
mutate(Team = ifelse(Team == "UTAH","UTA",ifelse(Team == "NO","NOP",Team))) %>% mutate(next_game = ifelse(Date >= Sys.Date(),TRUE,FALSE)) %>%
mutate(game_number = 1:n())
})
schedule <- bind_rows(schedule)
schedule <- schedule %>% filter(!is.na(Date))
#Next Game
next_game_date_teams <- schedule %>% filter(Date == schedule %>% filter(next_game == TRUE) %>% pull(Date) %>% min) %>% pull(slugTeam)
next_game_date_teams
schedule %>% filter(Date == schedule %>% filter(next_game == TRUE) %>% pull(Date) %>% min)
next_game_date_teams <- schedule %>% filter(Date == schedule %>% filter(next_game == TRUE) %>% pull(Date) %>% min) %>% pull(slugTeam)
next_team_batch <- lapply(next_game_date_teams, function(x){
rosters %>% filter(slugTeam == x) %>% filter(Include == "Y") %>% select(idPlayer,namePlayer)
})
next_team_batch <- bind_rows(next_team_batch)
next_team_batch <- next_team_batch %>% left_join(playerdata %>% filter(slugSeason == "2024-25") %>% group_by(idPlayer) %>% summarize(n = n()) %>% ungroup(), by = "idPlayer") %>% filter(n >=1)
next_team_batch <- next_team_batch %>% pull(namePlayer)
previous_game_date_teams <- schedule %>% filter(Date == schedule %>% filter(next_game == TRUE) %>% pull(Date) %>% min -1) %>% pull(slugTeam)
previous_game_date_teams
for (i in next_team_batch) {
rmarkdown::render(input = 'C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/ML_Parlay_TBRv10_2025.Rmd',
output_file = paste0(i,".html"),
output_dir = file.path('C:/Users/CECRAIG/Desktop/Backironanalytics/my-site-test/sheets'),
params = list(player = i))
}
